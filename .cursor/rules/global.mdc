---
description: 
globs: 
alwaysApply: true
---
 # Global Project Rules

> **These rules apply to the entire Intra-Big-job project**

## Critical Rules

### Always read before modifying
- **Severity: CRITICAL**
- Always read the entire file before suggesting any modifications
- This is essential to understand the context and dependencies
- Always modifiy the code by yourself like a real agent, I dont want any advises like "you should replace this line by that" or "Would you like me to implement this..."

### Verify imports
- **Severity: CRITICAL**
- Never modify import statements without verifying the destination file exists
- This applies to both PHP namespace imports and JavaScript/TypeScript imports

### Understand architecture
- **Severity: CRITICAL**
- Understand the overall architecture before making cross-component changes
- This project uses React for frontend, Symfony for backend, with domain-driven design

### Check API flow
- **Severity: CRITICAL**
- Trace the entire API data flow before modifying endpoint-related code
- Follow the path: Frontend API call → Backend Controller → Service → Repository → Database and back

### Security awareness
- **Severity: CRITICAL**
- Maintain security best practices, especially for authentication and file handling
- Be careful with JWT authentication, file uploads, and permission checks

### Docker-only development
- **Severity: CRITICAL**
- Always use Docker for development (see [Infrastructure Rules](mdc:infrastructure.mdc))
- Never execute `npm install` or `npm run dev` directly on host; all dependencies are managed in containers

## High Priority Rules

### Environment variables
- **Severity: HIGH**
- Never hardcode values that should come from environment variables
- Use environment variables for API URLs, credentials, and configuration

### Role awareness
- **Severity: HIGH**
- Consider the user role system for any feature modifications
- The system has 7 distinct roles with different permissions:
  1. ADMIN
  2. SUPERADMIN
  3. HR
  4. TEACHER
  5. STUDENT
  6. GUEST
  7. RECRUITER

### Document relationships
- **Severity: HIGH**
- Understand entity/component relationships before modifications
- The system has complex relationships between users, documents, formations, tickets, etc.

### Terminal first
- **Severity: HIGH**
- Check terminal logs first when investigating issues
- Terminal output provides the most direct insight into errors and system state
- Use Docker logs: `docker-compose logs [service]` for service-specific logs

## Medium Priority Rules

### Maintain patterns
- **Severity: MEDIUM**
- Follow established code patterns and conventions
- Maintain consistency with existing code style, naming conventions, and architectural patterns
