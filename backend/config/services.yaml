# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    # Paramètres pour les refresh tokens (remplace ceux du bundle supprimé)
    refresh_token.ttl: 2592000  # 30 jours en secondes
    refresh_token.ttl_update: true  # Mise à jour du TTL à chaque rafraîchissement
    refresh_token.token_parameter_name: 'refresh_token'  # Le nom du paramètre dans la requête
    # Paramètre pour le répertoire de stockage des documents
    document_directory: '%kernel.project_dir%/public/uploads/documents'
    # Paramètres AWS
    aws.bucket_name: '%env(AWS_BUCKET)%'
    aws.region: '%env(AWS_REGION)%'
    aws.use_s3_storage: true  # Set to false to use local storage instead of S3
    # URL du frontend (from group3)
    app.frontend_url: 'http://localhost:5173'  # URL du frontend
    # Paramètres du service de timeout adaptatif
    timeout.cache_ttl: 3600  # Durée de vie du cache des métriques de performance en secondes

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # Configuration pour le stockage des documents
    App\Service\DocumentStorageFactory:
        arguments:
            $useS3Storage: '%aws.use_s3_storage%'
            $bucketName: '%aws.bucket_name%'
            $region: '%aws.region%'
            $documentDirectory: '%document_directory%'

    # Configuration du service de refresh token
    App\Service\RefreshTokenService:
        # Les paramètres sont déjà injectés via ParameterBagInterface
        # Pas besoin d'arguments supplémentaires

    # Service d'initialisation PHP
    App\Service\PhpConfigInitializer:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 255 }

    # Configuration des contrôleurs API
    App\Controller\ApiController:
        tags: ['controller.service_arguments']

    App\Controller\AuthController:
        tags: ['controller.service_arguments']

    App\Controller\UserController:
        tags: ['controller.service_arguments']

    App\Controller\ProfileController:
        tags: ['controller.service_arguments']

    App\Controller\TokenController:
        tags: ['controller.service_arguments']

    # Configuration de l'écouteur d'événement AuthenticationSuccessListener
    App\EventListener\AuthenticationSuccessListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccess, priority: 10 }
        arguments:
            $tokenParameterName: '%refresh_token.token_parameter_name%'

    App\EventListener\JWTAuthenticationListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccess }

    # Notre écouteur d'exception API pour retourner des erreurs en JSON
    App\EventListener\ApiExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 100 }

    # Notre gestionnaire d'erreur d'authentification personnalisé
    lexik_jwt_authentication.handler.authentication_failure:
        class: App\Security\AuthenticationFailureHandler

    # Générateur de token pour la réinitialisation de mot de passe
    Symfony\Component\Security\Csrf\TokenGenerator\TokenGeneratorInterface:
        class: Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator
    
    # Configuration du service de réinitialisation de mot de passe
    App\Service\ResetPasswordService:
        arguments:
            $emailService: '@App\Service\EmailService'
    # Message cleanup listener for automatic cleanup of old messages
    App\EventListener\MessageCleanupListener:
        arguments:
            $messageCleanupService: '@App\Service\MessageCleanupService'
            $logger: '@logger'
            $cacheDir: '%kernel.cache_dir%'
            $cleanupInterval: 86400  # 24 hours in seconds
            $daysToKeep: 15  # Keep messages for 15 days
        tags:
            - { name: kernel.event_listener, event: kernel.terminate, method: onKernelTerminate }
    
    # Configuration du service de timeout adaptatif
    App\Service\TimeoutService:
        arguments:
            $cache: '@cache.app'
            $logger: '@logger'
            
    # Écouteur d'événements pour le timeout adaptatif
    App\EventListener\HttpTimeoutListener:
        arguments:
            $timeoutService: '@App\Service\TimeoutService'
        tags:
            - { name: kernel.event_subscriber }
            
    # Factory pour HttpClient avec timeout adaptatif
    App\Service\HttpClientFactory:
        arguments:
            $timeoutService: '@App\Service\TimeoutService'
            $requestStack: '@request_stack'
            
    # Configuration du DocumentController
    App\Domains\Global\Document\Controller\DocumentController:
        arguments:
            $documentDirectory: '%document_directory%'
