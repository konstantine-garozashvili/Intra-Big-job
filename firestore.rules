rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction helper pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction helper pour vérifier si l'utilisateur a un rôle valide
    function hasValidRole() {
      return isAuthenticated() && 
        (request.auth.token.role in ['ROLE_ADMIN', 'ROLE_SUPERADMIN', 'ROLE_HR', 'ROLE_TEACHER', 'ROLE_STUDENT', 'ROLE_GUEST', 'ROLE_RECRUITER']);
    }

    // Fonction helper pour vérifier si l'utilisateur est participant au chat
    function isParticipant(chatId) {
      return chatId == 'global' || 
        (exists(/databases/$(database)/documents/chats/$(chatId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
    }

    // Règles pour les notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.recipientId == request.auth.uid;
      allow write: if isAuthenticated() && hasValidRole();
    }

    // Règles pour les préférences de notification
    match /notificationPreferences/{userId} {
      allow read, write: if isAuthenticated() && userId == request.auth.uid;
    }

    // Règles pour le chat global
    match /chats/global/messages/{messageId} {
      allow read: if isAuthenticated() && hasValidRole();
      allow create: if isAuthenticated() && hasValidRole() && 
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.content is string &&
        request.resource.data.content.size() <= 1000 && // Limite de 1000 caractères
        request.resource.data.createdAt is timestamp;
    }

    // Règles pour les chats privés
    match /chats/{chatId} {
      allow read: if isAuthenticated() && isParticipant(chatId);
      allow create: if isAuthenticated() && 
        request.resource.data.participants is list &&
        request.resource.data.participants.size() == 2 &&
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && isParticipant(chatId);

      // Messages dans les chats privés
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isParticipant(chatId);
        allow create: if isAuthenticated() && 
          isParticipant(chatId) &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.content is string &&
          request.resource.data.content.size() <= 1000 &&
          request.resource.data.createdAt is timestamp;
      }

      // Indicateurs de frappe
      match /typing/{userId} {
        allow read: if isAuthenticated() && isParticipant(chatId);
        allow write: if isAuthenticated() && 
          userId == request.auth.uid && 
          isParticipant(chatId) &&
          request.resource.data.userId == request.auth.uid &&
          (request.resource.data.timestamp == null || request.resource.data.timestamp is timestamp);
      }
    }

    // Règles pour les participants aux chats
    match /chats/{chatId}/participants/{userId} {
      allow read: if isAuthenticated() && isParticipant(chatId);
    }
  }
} 