import{y as e}from"./index-CbCqSr3O.js";class t extends Error{constructor(e,t="FORMATION_TEACHER_ERROR"){super(e),this.name="FormationTeacherError",this.code=t}}const a=new class{async getAvailableTeachers(){try{return(await e.get("/api/formation-teachers/available-teachers")).data||[]}catch(a){throw new t("Failed to fetch available teachers","GET_AVAILABLE_TEACHERS_ERROR")}}async getAllFormationTeachers(){try{const t=await e.get("/api/formation-teachers"),a=t?.data;return a||[]}catch(a){throw new t("Failed to fetch all formation teachers","GET_ALL_FORMATION_TEACHERS_ERROR")}}async getTeachersByFormation(a){if(!a||"number"!=typeof a)throw new t("Formation ID is required and must be a number","INVALID_FORMATION_ID");try{return(await e.get(`/api/formation-teachers/formation/${a}`)).data||[]}catch(r){const e=r.response?.data?.message||`Failed to fetch teachers for formation ${a}`;throw new t(e,"GET_TEACHERS_BY_FORMATION_ERROR")}}async getFormationsByTeacher(a){if(!a||"number"!=typeof a)throw new t("Teacher ID is required and must be a number","INVALID_TEACHER_ID");try{return(await e.get(`/api/formation-teachers/teacher/${a}`)).data||[]}catch(r){throw new t(`Failed to fetch formations for teacher ${a}`,"GET_FORMATIONS_BY_TEACHER_ERROR")}}async getStats(){try{return(await e.get("/api/formation-teachers/stats")).data||{}}catch(a){throw new t("Failed to fetch formation teacher statistics","GET_STATS_ERROR")}}async batchUpdate(a){if(!Array.isArray(a)||0===a.length)throw new t("Updates must be a non-empty array","INVALID_BATCH_UPDATE");try{return(await e.post("/api/formation-teachers/batch",{updates:a})).data||[]}catch(r){throw new t("Failed to perform batch update","BATCH_UPDATE_ERROR")}}async create(a,r,o){if(!a||"number"!=typeof a)throw new t("Formation ID is required and must be a number","INVALID_FORMATION_ID");if(!r||"number"!=typeof r)throw new t("User ID is required and must be a number","INVALID_USER_ID");if("boolean"!=typeof o)throw new t("isMainTeacher must be a boolean","INVALID_IS_MAIN_TEACHER");try{return(await e.post("/api/formation-teachers",{formation_id:a,user_id:r,is_main_teacher:o})).data||null}catch(n){const e=n.response?.data?.message||"Failed to create formation teacher relation";throw new t(e,"CREATE_ERROR")}}async update(a,r){if(!a||"number"!=typeof a)throw new t("ID is required and must be a number","INVALID_ID");if("boolean"!=typeof r)throw new t("isMainTeacher must be a boolean","INVALID_IS_MAIN_TEACHER");try{return(await e.put(`/api/formation-teachers/${a}`,{is_main_teacher:r})).data||null}catch(o){throw new t("Failed to update formation teacher relation","UPDATE_ERROR")}}async delete(a){if(!a||"number"!=typeof a)throw new t("ID is required and must be a number","INVALID_ID");try{return 204===(await e.delete(`/api/formation-teachers/${a}`)).status}catch(r){if(404===r.response?.status)throw new t("Formation teacher relation not found","NOT_FOUND_ERROR");throw new t("Failed to delete formation teacher relation","DELETE_ERROR")}}async getMyFormations(){try{return(await e.get("/api/formation-teachers/my-formations")).data||[]}catch(a){throw new t("Failed to fetch teacher formations","GET_MY_FORMATIONS_ERROR")}}async getFormationDetails(a){if(!a||"number"!=typeof a)throw new t("Formation ID is required and must be a number","INVALID_FORMATION_ID");try{return(await e.get(`/api/formations/${a}/teacher-view`)).data||null}catch(r){throw new t("Failed to fetch formation details","GET_FORMATION_DETAILS_ERROR")}}};"undefined"!=typeof window&&(window.formationTeacherService=a);export{a as f};
