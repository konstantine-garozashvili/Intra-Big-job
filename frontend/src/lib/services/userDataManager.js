import apiService from './apiService';
import { getQueryClient } from './queryClient';
import { getSessionId } from './authService';

// Cache pour les donn√©es utilisateur
const userDataCache = {
  data: null,
  timestamp: 0,
  isLoading: false,
  loadingPromise: null,
  requestCount: 0,
  pendingRequests: new Map(),
  // Optimis√© pour les performances : 2 minutes de fra√Æcheur des donn√©es
  freshnessDuration: 2 * 60 * 1000,
  // Dur√©e maximale de conservation des donn√©es (20 minutes)
  maxAgeDuration: 20 * 60 * 1000,
  // √âtat pour les erreurs cons√©cutives 
  consecutiveErrors: 0,
  // Limite d'erreurs avant blocage temporaire des requ√™tes
  errorThreshold: 3,
  // Dernier temps de blocage
  lastCircuitBreak: 0,
  // Dur√©e du blocage (15 secondes par d√©faut)
  circuitBreakDuration: 15 * 1000,
  // √âv√©nements pour notifier les changements
  events: new EventTarget(),
  // ID de l'op√©ration courante pour √©viter les appels en doublon
  currentOperationId: null,
  // D√©lai pour consid√©rer les op√©rations comme distinctes (en ms)
  operationDebounceTime: 100,
  // Date de la derni√®re op√©ration
  lastOperationTime: 0,
  // Map de d√©duplication pour traquer les requ√™tes identiques durant le m√™me cycle
  deduplicationMap: new Map()
};

// √âv√©nements personnalis√©s
export const USER_DATA_EVENTS = {
  LOADED: 'userData:loaded',
  LOADING: 'userData:loading',
  ERROR: 'userData:error',
  UPDATED: 'userData:updated'
};

/**
 * Service centralis√© pour g√©rer les donn√©es utilisateur
 */
const userDataManager = {
  /**
   * R√©cup√®re les donn√©es utilisateur
   * @param {Object} options - Options de r√©cup√©ration
   * @param {boolean} options.forceRefresh - Force une nouvelle requ√™te m√™me si les donn√©es sont fra√Æches
   * @param {number} options.maxAge - √Çge maximal des donn√©es en ms (par d√©faut 20 minutes)
   * @param {boolean} options.useCache - Utilise les donn√©es en cache si disponibles
   * @param {string} options.routeKey - Cl√© de route √† utiliser ('/api/me' ou '/profile/consolidated')
   * @param {string} options.requestId - Identifiant unique de la requ√™te pour d√©duplication
   * @returns {Promise<Object>} - Donn√©es utilisateur
   */
  async getUserData(options = {}) {
    const {
      forceRefresh = false,
      maxAge = userDataCache.maxAgeDuration,
      useCache = true,
      routeKey = '/api/me',
      requestId = `user_data_${Date.now()}`
    } = options;

    // G√©n√©ration d'une cl√© de d√©duplication bas√©e sur les param√®tres de la requ√™te
    const deduplicationKey = `${routeKey}_${forceRefresh}_${maxAge}_${useCache}`;
    
    // Si une requ√™te identique est en cours dans le m√™me cycle de rendu (30ms), r√©utiliser sa promesse
    const now = Date.now();
    const recentDeduplicationEntry = userDataCache.deduplicationMap.get(deduplicationKey);
    if (recentDeduplicationEntry && now - recentDeduplicationEntry.timestamp < 30) {
      console.log(`üîÑ Requ√™te dupliqu√©e d√©tect√©e et d√©dupliqu√©e pour ${routeKey}`);
      return recentDeduplicationEntry.promise;
    }

    // Incr√©menter le compteur de requ√™tes
    userDataCache.requestCount++;
    
    // V√©rifier si le circuit breaker est actif (trop d'erreurs cons√©cutives)
    if (userDataCache.consecutiveErrors >= userDataCache.errorThreshold) {
      const timeInBreak = now - userDataCache.lastCircuitBreak;
      if (timeInBreak < userDataCache.circuitBreakDuration) {
        console.warn(`Circuit breaker actif, attente de ${(userDataCache.circuitBreakDuration - timeInBreak) / 1000}s avant nouvelles requ√™tes`);
        
        // Si on a des donn√©es en cache, les retourner m√™me si elles sont anciennes
        if (userDataCache.data) {
          return userDataCache.data;
        }
        
        // Sinon, tenter de r√©cup√©rer les donn√©es depuis le localStorage
        try {
          const cachedUserStr = localStorage.getItem('user');
          if (cachedUserStr) {
            return JSON.parse(cachedUserStr);
          }
        } catch (e) {
          console.error('Erreur lors de la r√©cup√©ration des donn√©es utilisateur du localStorage:', e);
        }
        
        // Si tout √©choue, attendre que le circuit breaker se r√©initialise
        await new Promise(resolve => setTimeout(resolve, userDataCache.circuitBreakDuration - timeInBreak));
      } else {
        // R√©initialiser le circuit breaker apr√®s la p√©riode de pause
        userDataCache.consecutiveErrors = 0;
      }
    }

    // Si une requ√™te est d√©j√† en cours pour la m√™me route, retourner la promesse existante
    if (userDataCache.pendingRequests.has(routeKey) && !forceRefresh) {
      console.log(`Requ√™te UserData d√©j√† en cours pour ${routeKey}, r√©utilisation de la promesse existante`);
      return userDataCache.pendingRequests.get(routeKey);
    }

    // V√©rifier si les donn√©es en cache sont suffisamment fra√Æches
    if (
      useCache && 
      userDataCache.data && 
      !forceRefresh && 
      now - userDataCache.timestamp < maxAge
    ) {
      // V√©rifier si elles sont tr√®s fra√Æches (moins de 2 minutes)
      const isSuperFresh = now - userDataCache.timestamp < userDataCache.freshnessDuration;
      
      if (isSuperFresh) {
        console.log('Utilisation des donn√©es utilisateur en cache (tr√®s fra√Æches)');
        return userDataCache.data;
      }
      
      // Si les donn√©es sont moins fra√Æches mais utilisables, les retourner et d√©clencher un rafra√Æchissement en arri√®re-plan
      console.log('Utilisation des donn√©es utilisateur en cache (actualisation en arri√®re-plan)');
      
      // D√©clencher un rafra√Æchissement en arri√®re-plan sans attendre le r√©sultat
      this._loadUserData(routeKey, { background: true })
        .catch(e => console.warn('Erreur lors du rafra√Æchissement en arri√®re-plan:', e));
        
      return userDataCache.data;
    }

    // Si nous arrivons ici, nous devons charger/recharger les donn√©es
    const dataPromise = this._loadUserData(routeKey, { forceRefresh });
    
    // Stocker la promesse pour la d√©duplication
    userDataCache.deduplicationMap.set(deduplicationKey, {
      timestamp: now,
      promise: dataPromise
    });
    
    // Nettoyer les entr√©es de d√©duplication anciennes toutes les 5 secondes
    if (now - userDataCache.lastOperationTime > 5000) {
      setTimeout(() => {
        const currentTime = Date.now();
        for (const [key, entry] of userDataCache.deduplicationMap.entries()) {
          if (currentTime - entry.timestamp > 100) {
            userDataCache.deduplicationMap.delete(key);
          }
        }
      }, 0);
      userDataCache.lastOperationTime = now;
    }
    
    return dataPromise;
  },

  /**
   * Charge les donn√©es utilisateur depuis l'API
   * @private
   * @param {string} routeKey - Cl√© de route √† utiliser
   * @param {Object} options - Options de chargement
   * @returns {Promise<Object>} - Donn√©es utilisateur
   */
  async _loadUserData(routeKey, options = {}) {
    const { forceRefresh = false, background = false } = options;
    
    // Notifier que le chargement a commenc√© si ce n'est pas un chargement en arri√®re-plan
    if (!background) {
      userDataCache.isLoading = true;
      userDataCache.events.dispatchEvent(new CustomEvent(USER_DATA_EVENTS.LOADING));
    }

    // Cr√©er une nouvelle promesse pour le chargement
    const loadPromise = new Promise(async (resolve, reject) => {
      try {
        // D√©terminer les options appropri√©es en fonction de si c'est un chargement forc√©
        const apiOptions = {
          noCache: forceRefresh,
          retries: background ? 1 : 2, // Moins de tentatives pour les requ√™tes en arri√®re-plan
          timeout: background ? 8000 : 12000, // Timeout plus court pour les requ√™tes en arri√®re-plan
        };

        // Appeler l'API pour obtenir les donn√©es utilisateur
        const response = await apiService.get(routeKey, apiOptions);
        
        // Extraire les donn√©es utilisateur de la r√©ponse
        let userData = response;
        if (response.user) {
          userData = response.user;
        } else if (response.data) {
          userData = response.data;
        } else if (response.success && response.user) {
          userData = response.user;
        }

        // Stocker les donn√©es dans le cache
        userDataCache.data = userData;
        userDataCache.timestamp = Date.now();
        userDataCache.isLoading = false;
        userDataCache.consecutiveErrors = 0; // R√©initialiser les erreurs cons√©cutives

        // Stocker les donn√©es utilisateur dans le localStorage
        localStorage.setItem('user', JSON.stringify(userData));
        
        // Mettre √† jour le cache React Query
        const queryClient = getQueryClient();
        if (queryClient) {
          // Mettre √† jour toutes les cl√©s possibles qui pourraient utiliser ces donn√©es
          queryClient.setQueryData(['user', 'current'], userData);
          
          const sessionId = getSessionId();
          queryClient.setQueryData(['user-data', userData?.id || 'anonymous', sessionId], userData);
          queryClient.setQueryData(['currentUser'], userData);
        }

        // Notifier que les donn√©es ont √©t√© charg√©es
        userDataCache.events.dispatchEvent(new CustomEvent(USER_DATA_EVENTS.LOADED, { detail: userData }));
        
        // Si ce n'est pas un chargement en arri√®re-plan, d√©clencher un √©v√©nement mis √† jour
        if (!background) {
          userDataCache.events.dispatchEvent(new CustomEvent(USER_DATA_EVENTS.UPDATED, { detail: userData }));
        }

        resolve(userData);
      } catch (error) {
        console.error(`Erreur lors du chargement des donn√©es utilisateur depuis ${routeKey}:`, error);
        
        userDataCache.isLoading = false;
        userDataCache.consecutiveErrors++; // Incr√©menter le compteur d'erreurs cons√©cutives
        
        // Si le seuil d'erreur est atteint, activer le circuit breaker
        if (userDataCache.consecutiveErrors >= userDataCache.errorThreshold) {
          userDataCache.lastCircuitBreak = Date.now();
          console.warn(`Circuit breaker activ√© pour les requ√™tes utilisateur (${userDataCache.consecutiveErrors} erreurs cons√©cutives)`);
        }

        // Notifier l'erreur
        userDataCache.events.dispatchEvent(new CustomEvent(USER_DATA_EVENTS.ERROR, { detail: error }));
        
        // Essayer de r√©cup√©rer les donn√©es du cache ou du localStorage
        if (userDataCache.data) {
          console.log('√âchec de la requ√™te, utilisation des donn√©es en cache');
          resolve(userDataCache.data);
        } else {
          try {
            const cachedUserStr = localStorage.getItem('user');
            if (cachedUserStr) {
              const cachedUser = JSON.parse(cachedUserStr);
              console.log('√âchec de la requ√™te, utilisation des donn√©es du localStorage');
              resolve(cachedUser);
            } else {
              reject(error);
            }
          } catch (e) {
            reject(error);
          }
        }
      } finally {
        // Supprimer la requ√™te en cours de la map une fois termin√©e
        setTimeout(() => {
          userDataCache.pendingRequests.delete(routeKey);
        }, 0);
      }
    });

    // Stocker la promesse dans la map des requ√™tes en cours
    userDataCache.pendingRequests.set(routeKey, loadPromise);
    
    return loadPromise;
  },

  /**
   * V√©rifie si les donn√©es utilisateur sont en cours de chargement
   * @returns {boolean} - true si les donn√©es sont en cours de chargement
   */
  isLoading() {
    return userDataCache.isLoading;
  },

  /**
   * R√©cup√®re les donn√©es utilisateur du cache sans d√©clencher de requ√™te
   * @returns {Object|null} - Donn√©es utilisateur ou null si non disponibles
   */
  getCachedUserData() {
    // Si les donn√©es en cache sont disponibles et pas trop anciennes
    if (userDataCache.data && Date.now() - userDataCache.timestamp < userDataCache.maxAgeDuration) {
      return userDataCache.data;
    }
    
    // Sinon, essayer de r√©cup√©rer depuis le localStorage
    try {
      const userStr = localStorage.getItem('user');
      if (userStr) {
        return JSON.parse(userStr);
      }
    } catch (e) {
      console.error('Erreur lors de la r√©cup√©ration des donn√©es utilisateur du localStorage:', e);
    }
    
    return null;
  },

  /**
   * Invalide le cache des donn√©es utilisateur
   */
  invalidateCache() {
    userDataCache.data = null;
    userDataCache.timestamp = 0;
    
    // Invalider √©galement le cache React Query
    const queryClient = getQueryClient();
    if (queryClient) {
      queryClient.invalidateQueries({ queryKey: ['user'] });
      queryClient.invalidateQueries({ queryKey: ['currentUser'] });
      queryClient.invalidateQueries({ queryKey: ['user-data'] });
    }
  },

  /**
   * S'abonne aux √©v√©nements de changement des donn√©es utilisateur
   * @param {string} eventName - Nom de l'√©v√©nement (voir USER_DATA_EVENTS)
   * @param {Function} callback - Fonction de rappel √† appeler lors de l'√©v√©nement
   * @returns {Function} - Fonction pour se d√©sabonner
   */
  subscribe(eventName, callback) {
    if (!Object.values(USER_DATA_EVENTS).includes(eventName)) {
      console.warn(`√âv√©nement inconnu: ${eventName}`);
      return () => {};
    }
    
    const handler = (event) => callback(event.detail);
    userDataCache.events.addEventListener(eventName, handler);
    
    // Retourner une fonction pour se d√©sabonner
    return () => userDataCache.events.removeEventListener(eventName, handler);
  },

  /**
   * R√©cup√®re les statistiques d'utilisation du gestionnaire de donn√©es utilisateur
   * @returns {Object} - Statistiques
   */
  getStats() {
    const now = Date.now();
    return {
      requestCount: userDataCache.requestCount,
      lastUpdated: userDataCache.timestamp ? new Date(userDataCache.timestamp).toISOString() : null,
      dataAge: userDataCache.timestamp ? now - userDataCache.timestamp : null,
      consecutiveErrors: userDataCache.consecutiveErrors,
      pendingRequests: Array.from(userDataCache.pendingRequests.keys()),
      isCircuitBreakerActive: userDataCache.consecutiveErrors >= userDataCache.errorThreshold &&
        (now - userDataCache.lastCircuitBreak < userDataCache.circuitBreakDuration),
      // Nouvelles statistiques de d√©duplication
      deduplicationMapSize: userDataCache.deduplicationMap.size,
      deduplicationEntries: Array.from(userDataCache.deduplicationMap.entries()).map(([key, entry]) => ({
        key,
        age: now - entry.timestamp
      })),
      cacheStatus: userDataCache.data ? (
        now - userDataCache.timestamp < userDataCache.freshnessDuration 
          ? 'fresh' 
          : now - userDataCache.timestamp < userDataCache.maxAgeDuration
            ? 'stale'
            : 'expired'
      ) : 'empty',
      hasCachedData: !!userDataCache.data,
      isLoading: userDataCache.isLoading
    };
  }
};

export default userDataManager; 