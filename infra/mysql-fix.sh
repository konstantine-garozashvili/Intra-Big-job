#!/bin/bash
# Script pour corriger le probl√®me de connexion MySQL dans Docker sur Windows 10

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${CYAN}üîß Correction du probl√®me de connexion MySQL sur Windows 10...${NC}\n"

# V√©rifier si Docker est en cours d'ex√©cution
if ! docker info >/dev/null 2>&1; then
  echo -e "${RED}‚ùå Docker n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker.${NC}"
  exit 1
fi

# Arr√™ter les containers pour √©viter tout conflit
echo -e "${YELLOW}üì¶ Arr√™t des containers en cours...${NC}"
docker-compose down

# Supprimer le volume MySQL pour forcer sa recr√©ation
echo -e "${YELLOW}üóëÔ∏è Suppression du volume MySQL...${NC}"
docker volume rm infra_database_data 2>/dev/null || true

# Recr√©er le r√©pertoire de montage avec les bonnes permissions
MYSQL_VOLUME_PATH="C:/DockerVolumes/mysql-data"
echo -e "${YELLOW}üìÅ Recr√©ation du r√©pertoire pour MySQL: ${BLUE}$MYSQL_VOLUME_PATH${NC}"
rm -rf "$MYSQL_VOLUME_PATH" 2>/dev/null || true
mkdir -p "$MYSQL_VOLUME_PATH"

# D√©finir les permissions du dossier
echo -e "${YELLOW}üîí Ajustement des permissions...${NC}"
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    echo -e "${YELLOW}üîß Syst√®me Windows d√©tect√©, utilisation de icacls...${NC}"
    WINDOWS_PATH=$(echo "$MYSQL_VOLUME_PATH" | sed 's|/|\\|g')
    icacls "$WINDOWS_PATH" /grant:r "Everyone:(OI)(CI)F" /T
else
    echo -e "${YELLOW}üîß Syst√®me Unix d√©tect√©, utilisation de chmod...${NC}"
    chmod -R 777 "$MYSQL_VOLUME_PATH"
fi

# Cr√©er un script SQL plus robuste pour corriger les permissions
echo -e "${YELLOW}üìù Cr√©ation d'un script MySQL am√©lior√©...${NC}"
mkdir -p infra/mysql-init
cat > infra/mysql-init/init.sql << 'EOF'
-- Permettre √† tous les utilisateurs de se connecter depuis n'importe quelle adresse IP
-- Cr√©er/mettre √† jour l'utilisateur root pour accepter les connexions de n'importe o√π
CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED BY 'root';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';

-- Cr√©er/mettre √† jour l'utilisateur standard
CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'user'@'%';
ALTER USER 'user'@'%' IDENTIFIED WITH mysql_native_password BY 'password';

-- S'assurer que les privil√®ges sont appliqu√©s
FLUSH PRIVILEGES;

-- V√©rifier les utilisateurs cr√©√©s (pour le debug)
SELECT user, host FROM mysql.user;
EOF

# Cr√©er un script pour ex√©cuter directement dans le container
echo -e "${YELLOW}üìù Cr√©ation d'un script pour ex√©cution directe dans le container...${NC}"
cat > infra/mysql-init/direct-fix.sh << 'EOF'
#!/bin/bash
# Ce script sera copi√© dans le container MySQL et ex√©cut√© manuellement si n√©cessaire

echo "Ex√©cution de corrections manuelles pour MySQL..."

# Attendre que MySQL soit pr√™t (max 30 secondes)
max_attempts=30
counter=0
until mysql -uroot -proot -e "SELECT 1" &>/dev/null
do
    sleep 1
    counter=$((counter + 1))
    if [ $counter -ge $max_attempts ]; then
        echo "Erreur: MySQL n'est pas disponible apr√®s $max_attempts secondes"
        exit 1
    fi
    echo "Attente que MySQL soit pr√™t... ($counter/$max_attempts)"
done

# Ex√©cuter les commandes SQL pour corriger les permissions
mysql -uroot -proot << 'EOSQL'
-- Permettre √† tous les utilisateurs de se connecter depuis n'importe quelle adresse IP
CREATE USER IF NOT EXISTS 'root'@'%' IDENTIFIED BY 'root';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;
ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'root';

CREATE USER IF NOT EXISTS 'root'@'172.18.0.%' IDENTIFIED BY 'root';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.18.0.%' WITH GRANT OPTION;

CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'user'@'%';
ALTER USER 'user'@'%' IDENTIFIED WITH mysql_native_password BY 'password';

CREATE USER IF NOT EXISTS 'user'@'172.18.0.%' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON *.* TO 'user'@'172.18.0.%';

-- S'assurer que les privil√®ges sont appliqu√©s
FLUSH PRIVILEGES;

-- V√©rifier les utilisateurs cr√©√©s
SELECT user, host FROM mysql.user;
EOSQL

echo "Correction termin√©e!"
EOF

chmod +x infra/mysql-init/direct-fix.sh

# Modifier le docker-compose.yml pour ajouter une instruction sp√©cifique pour Windows 10
echo -e "${YELLOW}üìù Am√©lioration de docker-compose.yml...${NC}"

# Cr√©er un script pour rendre les scripts d'initialisation ex√©cutables
cat > infra/mysql-init/make-executable.sh << 'EOF'
#!/bin/bash
echo "D√©finition des permissions d'ex√©cution sur les scripts..."
chmod +x /docker-entrypoint-initdb.d/*.sh
ls -la /docker-entrypoint-initdb.d/
EOF

chmod +x infra/mysql-init/make-executable.sh

# Red√©marrer les containers
echo -e "${YELLOW}üöÄ Red√©marrage des containers...${NC}"
docker-compose up -d

# Attendre que le container MySQL soit pr√™t
echo -e "${YELLOW}‚è≥ Attente du d√©marrage de MySQL...${NC}"
sleep 20

# Ex√©cuter le script de correction directement dans le container
echo -e "${YELLOW}üîß Ex√©cution du script de correction directement dans le container...${NC}"
docker exec infra-database-1 bash -c "chmod +x /docker-entrypoint-initdb.d/direct-fix.sh && /docker-entrypoint-initdb.d/direct-fix.sh"

echo -e "\n${GREEN}‚úÖ Correction termin√©e!${NC}"
echo -e "${CYAN}‚ÑπÔ∏è Si le probl√®me persiste, red√©marrez compl√®tement Docker Desktop.${NC}"
echo -e "${CYAN}‚ÑπÔ∏è Vous pouvez √©galement essayer: docker exec infra-database-1 bash -c '/docker-entrypoint-initdb.d/direct-fix.sh'${NC}" 