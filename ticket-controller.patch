From 751770f852f0299833f8f0093691abb50f1efeb1 Mon Sep 17 00:00:00 2001
From: konstantine-garozashvili <konstantine.garozashvili@laplateforme.io>
Date: Tue, 25 Mar 2025 16:22:25 +0100
Subject: [PATCH] Created ticket Controller with precise exports

fixed redirection problem and false error as admin when we create ticket

ticket details routing fixed for admins when from details they want to go back to admin/tickets page

bulk status change as admin fixed api end points

ticket function inplemented

Created migration for ticket table with status
---
 backend/migrations/Version20240525000000.php  |  72 ++
 backend/migrations/Version20250325132758.php  |  37 +
 backend/migrations/Version20250325134919.php  |  35 +
 .../Controller/TicketCommentController.php    | 166 ++++
 backend/src/Controller/TicketController.php   | 864 ++++++++++++++++++
 .../Controller/TicketServiceController.php    | 132 +++
 .../DataFixtures/TicketServiceFixtures.php    |  53 ++
 .../src/DataFixtures/TicketStatusFixtures.php |  61 ++
 backend/src/Entity/Ticket.php                 | 227 +++++
 backend/src/Entity/TicketComment.php          | 107 +++
 backend/src/Entity/TicketService.php          |  94 ++
 backend/src/Entity/TicketStatus.php           | 110 +++
 backend/src/Entity/User.php                   |  78 +-
 .../Repository/TicketCommentRepository.php    |  54 ++
 backend/src/Repository/TicketRepository.php   |  80 ++
 .../Repository/TicketServiceRepository.php    |  41 +
 .../src/Repository/TicketStatusRepository.php |  41 +
 frontend/src/App.jsx                          |  28 +
 frontend/src/components/MenuBurger.jsx        |  56 +-
 frontend/src/components/Navbar.jsx            |   2 +-
 frontend/src/components/TicketDetail.jsx      | 482 ++++++++++
 frontend/src/components/TicketForm.jsx        | 213 +++++
 frontend/src/components/TicketList.jsx        | 359 ++++++++
 .../src/components/admin/AdminTicketList.jsx  | 534 +++++++++++
 .../components/admin/TicketServiceList.jsx    | 301 ++++++
 25 files changed, 4204 insertions(+), 23 deletions(-)
 create mode 100644 backend/migrations/Version20240525000000.php
 create mode 100644 backend/migrations/Version20250325132758.php
 create mode 100644 backend/migrations/Version20250325134919.php
 create mode 100644 backend/src/Controller/TicketCommentController.php
 create mode 100644 backend/src/Controller/TicketController.php
 create mode 100644 backend/src/Controller/TicketServiceController.php
 create mode 100644 backend/src/DataFixtures/TicketServiceFixtures.php
 create mode 100644 backend/src/DataFixtures/TicketStatusFixtures.php
 create mode 100644 backend/src/Entity/Ticket.php
 create mode 100644 backend/src/Entity/TicketComment.php
 create mode 100644 backend/src/Entity/TicketService.php
 create mode 100644 backend/src/Entity/TicketStatus.php
 create mode 100644 backend/src/Repository/TicketCommentRepository.php
 create mode 100644 backend/src/Repository/TicketRepository.php
 create mode 100644 backend/src/Repository/TicketServiceRepository.php
 create mode 100644 backend/src/Repository/TicketStatusRepository.php
 create mode 100644 frontend/src/components/TicketDetail.jsx
 create mode 100644 frontend/src/components/TicketForm.jsx
 create mode 100644 frontend/src/components/TicketList.jsx
 create mode 100644 frontend/src/components/admin/AdminTicketList.jsx
 create mode 100644 frontend/src/components/admin/TicketServiceList.jsx

diff --git a/backend/migrations/Version20240525000000.php b/backend/migrations/Version20240525000000.php
new file mode 100644
index 0000000..744ed1d
--- /dev/null
+++ b/backend/migrations/Version20240525000000.php
@@ -0,0 +1,72 @@
+<?php
+
+declare(strict_types=1);
+
+namespace DoctrineMigrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\AbstractMigration;
+
+final class Version20240525000000 extends AbstractMigration
+{
+    public function getDescription(): string
+    {
+        return 'Create ticket system tables';
+    }
+
+    public function up(Schema $schema): void
+    {
+        // Create ticket_status table
+        $this->addSql('CREATE TABLE ticket_status (
+            id INT AUTO_INCREMENT NOT NULL,
+            name VARCHAR(50) NOT NULL,
+            description VARCHAR(255) DEFAULT NULL,
+            color VARCHAR(50) DEFAULT NULL,
+            PRIMARY KEY(id)
+        ) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
+
+        // Create ticket table
+        $this->addSql('CREATE TABLE ticket (
+            id INT AUTO_INCREMENT NOT NULL,
+            creator_id INT NOT NULL,
+            assigned_to_id INT DEFAULT NULL,
+            status_id INT NOT NULL,
+            title VARCHAR(255) NOT NULL,
+            description LONGTEXT NOT NULL,
+            created_at DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\',
+            updated_at DATETIME DEFAULT NULL COMMENT \'(DC2Type:datetime_immutable)\',
+            priority VARCHAR(50) DEFAULT NULL,
+            resolved_at DATETIME DEFAULT NULL COMMENT \'(DC2Type:datetime_immutable)\',
+            INDEX IDX_97A0ADA361220EA6 (creator_id),
+            INDEX IDX_97A0ADA3F4BD7827 (assigned_to_id),
+            INDEX IDX_97A0ADA36BF700BD (status_id),
+            PRIMARY KEY(id)
+        ) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
+
+        // Add foreign key constraints
+        $this->addSql('ALTER TABLE ticket ADD CONSTRAINT FK_97A0ADA361220EA6 FOREIGN KEY (creator_id) REFERENCES `user` (id)');
+        $this->addSql('ALTER TABLE ticket ADD CONSTRAINT FK_97A0ADA3F4BD7827 FOREIGN KEY (assigned_to_id) REFERENCES `user` (id)');
+        $this->addSql('ALTER TABLE ticket ADD CONSTRAINT FK_97A0ADA36BF700BD FOREIGN KEY (status_id) REFERENCES ticket_status (id)');
+
+        // Insert default ticket status values
+        $this->addSql("INSERT INTO ticket_status (name, description, color) VALUES 
+            ('Open', 'Ticket is open and waiting for assignment', '#3498db'),
+            ('In Progress', 'Ticket is being worked on', '#f39c12'),
+            ('Resolved', 'Ticket has been resolved', '#2ecc71'),
+            ('Closed', 'Ticket has been closed', '#7f8c8d'),
+            ('Pending', 'Waiting for more information', '#e74c3c')
+        ");
+    }
+
+    public function down(Schema $schema): void
+    {
+        // Drop foreign key constraints first
+        $this->addSql('ALTER TABLE ticket DROP FOREIGN KEY FK_97A0ADA361220EA6');
+        $this->addSql('ALTER TABLE ticket DROP FOREIGN KEY FK_97A0ADA3F4BD7827');
+        $this->addSql('ALTER TABLE ticket DROP FOREIGN KEY FK_97A0ADA36BF700BD');
+
+        // Drop tables
+        $this->addSql('DROP TABLE ticket');
+        $this->addSql('DROP TABLE ticket_status');
+    }
+} 
\ No newline at end of file
diff --git a/backend/migrations/Version20250325132758.php b/backend/migrations/Version20250325132758.php
new file mode 100644
index 0000000..7590509
--- /dev/null
+++ b/backend/migrations/Version20250325132758.php
@@ -0,0 +1,37 @@
+<?php
+
+declare(strict_types=1);
+
+namespace DoctrineMigrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\AbstractMigration;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+final class Version20250325132758 extends AbstractMigration
+{
+    public function getDescription(): string
+    {
+        return '';
+    }
+
+    public function up(Schema $schema): void
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->addSql('CREATE TABLE ticket_service (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(255) NOT NULL, description VARCHAR(255) DEFAULT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
+        $this->addSql('ALTER TABLE ticket ADD service_id INT DEFAULT NULL');
+        $this->addSql('ALTER TABLE ticket ADD CONSTRAINT FK_97A0ADA3ED5CA9E6 FOREIGN KEY (service_id) REFERENCES ticket_service (id)');
+        $this->addSql('CREATE INDEX IDX_97A0ADA3ED5CA9E6 ON ticket (service_id)');
+    }
+
+    public function down(Schema $schema): void
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->addSql('ALTER TABLE ticket DROP FOREIGN KEY FK_97A0ADA3ED5CA9E6');
+        $this->addSql('DROP TABLE ticket_service');
+        $this->addSql('DROP INDEX IDX_97A0ADA3ED5CA9E6 ON ticket');
+        $this->addSql('ALTER TABLE ticket DROP service_id');
+    }
+}
diff --git a/backend/migrations/Version20250325134919.php b/backend/migrations/Version20250325134919.php
new file mode 100644
index 0000000..5c5b322
--- /dev/null
+++ b/backend/migrations/Version20250325134919.php
@@ -0,0 +1,35 @@
+<?php
+
+declare(strict_types=1);
+
+namespace DoctrineMigrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\AbstractMigration;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+final class Version20250325134919 extends AbstractMigration
+{
+    public function getDescription(): string
+    {
+        return '';
+    }
+
+    public function up(Schema $schema): void
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->addSql('CREATE TABLE ticket_comment (id INT AUTO_INCREMENT NOT NULL, ticket_id INT NOT NULL, author_id INT DEFAULT NULL, content LONGTEXT NOT NULL, created_at DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\', is_from_admin TINYINT(1) NOT NULL, INDEX IDX_98B80B3E700047D2 (ticket_id), INDEX IDX_98B80B3EF675F31B (author_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
+        $this->addSql('ALTER TABLE ticket_comment ADD CONSTRAINT FK_98B80B3E700047D2 FOREIGN KEY (ticket_id) REFERENCES ticket (id)');
+        $this->addSql('ALTER TABLE ticket_comment ADD CONSTRAINT FK_98B80B3EF675F31B FOREIGN KEY (author_id) REFERENCES `user` (id)');
+    }
+
+    public function down(Schema $schema): void
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->addSql('ALTER TABLE ticket_comment DROP FOREIGN KEY FK_98B80B3E700047D2');
+        $this->addSql('ALTER TABLE ticket_comment DROP FOREIGN KEY FK_98B80B3EF675F31B');
+        $this->addSql('DROP TABLE ticket_comment');
+    }
+}
diff --git a/backend/src/Controller/TicketCommentController.php b/backend/src/Controller/TicketCommentController.php
new file mode 100644
index 0000000..d5c2859
--- /dev/null
+++ b/backend/src/Controller/TicketCommentController.php
@@ -0,0 +1,166 @@
+<?php
+
+namespace App\Controller;
+
+use App\Entity\Ticket;
+use App\Entity\TicketComment;
+use App\Entity\User;
+use App\Repository\TicketCommentRepository;
+use App\Repository\TicketRepository;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\Serializer\SerializerInterface;
+
+#[Route('/api/tickets/{id}/comments')]
+class TicketCommentController extends AbstractController
+{
+    private EntityManagerInterface $entityManager;
+    private SerializerInterface $serializer;
+    private TicketRepository $ticketRepository;
+    private TicketCommentRepository $commentRepository;
+
+    public function __construct(
+        EntityManagerInterface $entityManager,
+        SerializerInterface $serializer,
+        TicketRepository $ticketRepository,
+        TicketCommentRepository $commentRepository
+    ) {
+        $this->entityManager = $entityManager;
+        $this->serializer = $serializer;
+        $this->ticketRepository = $ticketRepository;
+        $this->commentRepository = $commentRepository;
+    }
+
+    #[Route('', methods: ['GET'])]
+    public function getTicketComments(string $id): JsonResponse
+    {
+        $ticket = $this->ticketRepository->find((int)$id);
+        
+        if (!$ticket) {
+            return $this->json(['message' => 'Ticket non trouvé'], Response::HTTP_NOT_FOUND);
+        }
+        
+        /** @var User $user */
+        $user = $this->getUser();
+        
+        // Check if user is admin or the creator of the ticket
+        $isAdmin = false;
+        foreach ($user->getUserRoles() as $userRole) {
+            if (in_array($userRole->getRole()->getName(), ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                $isAdmin = true;
+                break;
+            }
+        }
+        
+        if (!$isAdmin && $ticket->getCreator()->getId() !== $user->getId()) {
+            return $this->json(['message' => 'Accès refusé'], Response::HTTP_FORBIDDEN);
+        }
+        
+        $comments = $this->commentRepository->findByTicket($ticket->getId());
+        
+        return $this->json([
+            'success' => true,
+            'comments' => $comments
+        ], Response::HTTP_OK, [], ['groups' => 'comment:read']);
+    }
+
+    #[Route('', methods: ['POST'])]
+    public function addComment(string $id, Request $request): JsonResponse
+    {
+        try {
+            error_log("addComment called for ticket ID: " . $id);
+            
+            $ticket = $this->ticketRepository->find((int)$id);
+            
+            if (!$ticket) {
+                error_log("Ticket not found: " . $id);
+                return $this->json(['message' => 'Ticket non trouvé'], Response::HTTP_NOT_FOUND);
+            }
+            
+            error_log("Found ticket: ID=" . $ticket->getId() . ", Title=" . $ticket->getTitle());
+            
+            /** @var User $user */
+            $user = $this->getUser();
+            error_log("User authenticated: ID=" . $user->getId() . ", Email=" . $user->getEmail());
+            
+            // Check if user is admin or the creator of the ticket - check both ways
+            $isAdmin = false;
+            
+            // Method 1: Check directly on the security user
+            if ($this->isGranted('ROLE_ADMIN') || $this->isGranted('ROLE_SUPER_ADMIN')) {
+                error_log("Admin check via isGranted: TRUE");
+                $isAdmin = true;
+            } else {
+                error_log("Admin check via isGranted: FALSE");
+                
+                // Method 2: Check via user roles as a fallback
+                foreach ($user->getUserRoles() as $userRole) {
+                    $roleName = $userRole->getRole()->getName();
+                    error_log("User role: " . $roleName);
+                    if (in_array($roleName, ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                        error_log("Admin role found: " . $roleName);
+                        $isAdmin = true;
+                        break;
+                    }
+                }
+            }
+            
+            error_log("Admin check final result: " . ($isAdmin ? 'Is Admin' : 'Not Admin'));
+            error_log("Creator check: User ID=" . $user->getId() . ", Ticket Creator ID=" . $ticket->getCreator()->getId());
+            error_log("Creator match: " . ($ticket->getCreator()->getId() === $user->getId() ? 'Yes' : 'No'));
+            
+            if (!$isAdmin && $ticket->getCreator()->getId() !== $user->getId()) {
+                error_log("Access denied: User is not admin and not ticket creator");
+                return $this->json(['message' => 'Accès refusé'], Response::HTTP_FORBIDDEN);
+            }
+            
+            $data = json_decode($request->getContent(), true);
+            error_log("Comment data received: " . json_encode($data));
+            
+            if (!isset($data['content']) || empty(trim($data['content']))) {
+                error_log("Comment content is empty or missing");
+                return $this->json(['message' => 'Le contenu du commentaire est requis'], Response::HTTP_BAD_REQUEST);
+            }
+            
+            $comment = new TicketComment();
+            $comment->setContent($data['content']);
+            $comment->setTicket($ticket);
+            $comment->setAuthor($user);
+            
+            // Set isFromAdmin based on user role
+            if (isset($data['isFromAdmin']) && $data['isFromAdmin'] && $isAdmin) {
+                error_log("Setting comment as admin comment");
+                $comment->setIsFromAdmin(true);
+            } else {
+                $comment->setIsFromAdmin(false);
+            }
+            
+            error_log("Persisting comment");
+            $this->entityManager->persist($comment);
+            $this->entityManager->flush();
+            
+            // Also update the ticket's updatedAt timestamp
+            $ticket->setUpdatedAt(new \DateTimeImmutable());
+            $this->entityManager->flush();
+            
+            error_log("Comment added successfully");
+            return $this->json([
+                'success' => true,
+                'message' => 'Commentaire ajouté avec succès',
+                'comment' => $comment
+            ], Response::HTTP_CREATED, [], ['groups' => 'comment:read']);
+            
+        } catch (\Exception $e) {
+            error_log("Exception in addComment: " . $e->getMessage() . "\n" . $e->getTraceAsString());
+            return $this->json([
+                'success' => false,
+                'message' => 'Erreur serveur: ' . $e->getMessage(),
+                'code' => 'SERVER_ERROR'
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Controller/TicketController.php b/backend/src/Controller/TicketController.php
new file mode 100644
index 0000000..3097784
--- /dev/null
+++ b/backend/src/Controller/TicketController.php
@@ -0,0 +1,864 @@
+<?php
+
+namespace App\Controller;
+
+use App\Entity\Ticket;
+use App\Entity\TicketService;
+use App\Entity\TicketStatus;
+use App\Entity\User;
+use App\Repository\TicketRepository;
+use App\Repository\TicketServiceRepository;
+use App\Repository\TicketStatusRepository;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Mailer\MailerInterface;
+use Symfony\Component\Mime\Email;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\Serializer\SerializerInterface;
+use App\Repository\UserRepository;
+
+#[Route('/api/tickets')]
+class TicketController extends AbstractController
+{
+    private EntityManagerInterface $entityManager;
+    private SerializerInterface $serializer;
+    private TicketRepository $ticketRepository;
+    private TicketStatusRepository $ticketStatusRepository;
+    private TicketServiceRepository $ticketServiceRepository;
+    private MailerInterface $mailer;
+
+    public function __construct(
+        EntityManagerInterface $entityManager,
+        SerializerInterface $serializer,
+        TicketRepository $ticketRepository,
+        TicketStatusRepository $ticketStatusRepository,
+        TicketServiceRepository $ticketServiceRepository,
+        MailerInterface $mailer
+    ) {
+        $this->entityManager = $entityManager;
+        $this->serializer = $serializer;
+        $this->ticketRepository = $ticketRepository;
+        $this->ticketStatusRepository = $ticketStatusRepository;
+        $this->ticketServiceRepository = $ticketServiceRepository;
+        $this->mailer = $mailer;
+    }
+
+    #[Route('', methods: ['GET'])]
+    public function getTickets(): JsonResponse
+    {
+        try {
+            /** @var User $user */
+            $user = $this->getUser();
+            
+            if (!$user) {
+                return $this->json([
+                    'success' => false,
+                    'message' => 'User not authenticated',
+                    'tickets' => []
+                ], Response::HTTP_UNAUTHORIZED);
+            }
+            
+            error_log("User ID: " . $user->getId());
+            error_log("User Email: " . $user->getEmail());
+            
+            // For admin users, get all tickets - check both ways
+            $isAdmin = false;
+            
+            // Method 1: Check via security system
+            if ($this->isGranted('ROLE_ADMIN') || $this->isGranted('ROLE_SUPER_ADMIN')) {
+                error_log("Admin access granted via isGranted");
+                $isAdmin = true;
+            } else {
+                error_log("isGranted check failed, checking user roles directly");
+                
+                // Method 2: Check via user roles as a fallback
+                if ($user->getRoles() && is_array($user->getRoles())) {
+                    error_log("User roles from getRoles(): " . implode(', ', $user->getRoles()));
+                    if (in_array('ROLE_ADMIN', $user->getRoles()) || in_array('ROLE_SUPER_ADMIN', $user->getRoles())) {
+                        error_log("Admin access granted via getRoles");
+                        $isAdmin = true;
+                    }
+                }
+                
+                // Method 3: Check via getUserRoles if available
+                if (method_exists($user, 'getUserRoles')) {
+                    foreach ($user->getUserRoles() as $userRole) {
+                        error_log("User role from getUserRoles: " . $userRole->getRole()->getName());
+                        if (in_array($userRole->getRole()->getName(), ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                            error_log("Admin access granted via getUserRoles");
+                            $isAdmin = true;
+                            break;
+                        }
+                    }
+                }
+            }
+            
+            error_log("Is Admin: " . ($isAdmin ? 'Yes' : 'No'));
+            
+            // Get count of tickets directly from database
+            $connection = $this->entityManager->getConnection();
+            $sql = 'SELECT COUNT(*) as count FROM ticket';
+            $stmt = $connection->prepare($sql);
+            $result = $stmt->executeQuery();
+            $totalTicketCount = $result->fetchAssociative()['count'];
+            error_log("Total tickets in database: " . $totalTicketCount);
+            
+            if ($totalTicketCount > 0) {
+                // Get sample ticket data for debugging with all fields
+                $sampleSql = 'SELECT * FROM ticket LIMIT 3';
+                $sampleStmt = $connection->prepare($sampleSql);
+                $sampleResult = $sampleStmt->executeQuery();
+                $sampleTickets = $sampleResult->fetchAllAssociative();
+                
+                if (!empty($sampleTickets)) {
+                    error_log("Sample tickets from direct SQL: " . json_encode($sampleTickets));
+                    
+                    // Check for specific ticket by ID if you know one exists
+                    $knownTicketId = $sampleTickets[0]['id'];
+                    error_log("Looking for specific ticket with ID: " . $knownTicketId);
+                    
+                    $specificTicket = $this->ticketRepository->find($knownTicketId);
+                    if ($specificTicket) {
+                        error_log("Found ticket with repository: ID={$specificTicket->getId()}, Title={$specificTicket->getTitle()}");
+                    } else {
+                        error_log("ERROR: Could not find ticket with ID {$knownTicketId} using repository!");
+                    }
+                }
+            }
+            
+            // Fetch tickets based on user role
+            if ($isAdmin) {
+                $tickets = $this->ticketRepository->findBy([], ['createdAt' => 'DESC']);
+                error_log("Admin user: found " . count($tickets) . " tickets using repository");
+                
+                // If repository returns empty but we know there are tickets in DB, use direct SQL
+                if (count($tickets) === 0 && $totalTicketCount > 0) {
+                    error_log("WARNING: Database has tickets but repository returned none, using direct SQL");
+                    
+                    try {
+                        // Get tickets directly via SQL
+                        $directSql = 'SELECT t.id, t.title, t.description, t.creator_id, t.assigned_to_id, 
+                                       t.status_id, t.priority, t.created_at, t.updated_at, t.resolved_at, t.service_id 
+                                       FROM ticket t ORDER BY t.created_at DESC';
+                        $directStmt = $connection->prepare($directSql);
+                        $directResult = $directStmt->executeQuery();
+                        $rawTickets = $directResult->fetchAllAssociative();
+                        
+                        error_log("Found " . count($rawTickets) . " tickets using direct SQL");
+                        
+                        // Convert raw data to ticket objects
+                        $tickets = [];
+                        foreach ($rawTickets as $rawTicket) {
+                            $ticket = new Ticket();
+                            $ticket->setId($rawTicket['id']);
+                            $ticket->setTitle($rawTicket['title']);
+                            $ticket->setDescription($rawTicket['description']);
+                            
+                            // Get creator
+                            if ($rawTicket['creator_id']) {
+                                $creator = $this->entityManager->getReference(User::class, $rawTicket['creator_id']);
+                                $ticket->setCreator($creator);
+                            }
+                            
+                            // Get assigned_to if exists
+                            if ($rawTicket['assigned_to_id']) {
+                                $assignedTo = $this->entityManager->getReference(User::class, $rawTicket['assigned_to_id']);
+                                $ticket->setAssignedTo($assignedTo);
+                            }
+                            
+                            // Get status
+                            if ($rawTicket['status_id']) {
+                                $status = $this->entityManager->getReference(TicketStatus::class, $rawTicket['status_id']);
+                                $ticket->setStatus($status);
+                            }
+                            
+                            // Get service if exists
+                            if (!empty($rawTicket['service_id'])) {
+                                $service = $this->entityManager->getReference(TicketService::class, $rawTicket['service_id']);
+                                $ticket->setService($service);
+                            }
+                            
+                            // Set other properties
+                            $ticket->setPriority($rawTicket['priority']);
+                            
+                            // Set dates
+                            if ($rawTicket['created_at']) {
+                                $ticket->setCreatedAt(new \DateTimeImmutable($rawTicket['created_at']));
+                            }
+                            if ($rawTicket['updated_at']) {
+                                $ticket->setUpdatedAt(new \DateTimeImmutable($rawTicket['updated_at']));
+                            }
+                            if ($rawTicket['resolved_at']) {
+                                $ticket->setResolvedAt(new \DateTimeImmutable($rawTicket['resolved_at']));
+                            }
+                            
+                            $tickets[] = $ticket;
+                        }
+                        
+                        error_log("Successfully created " . count($tickets) . " ticket objects");
+                    } catch (\Exception $sqlEx) {
+                        error_log("Error fetching tickets directly via SQL: " . $sqlEx->getMessage());
+                    }
+                }
+            } else {
+                // For regular users, only get their own tickets
+                $tickets = $this->ticketRepository->findByCreator($user->getId());
+                error_log("Regular user: found " . count($tickets) . " tickets for user ID " . $user->getId());
+            }
+            
+            // Debug the tickets array
+            if (!empty($tickets)) {
+                foreach ($tickets as $index => $ticket) {
+                    error_log("Ticket #{$index}: ID={$ticket->getId()}, Title={$ticket->getTitle()}, Creator ID={$ticket->getCreator()->getId()}");
+                }
+            } else {
+                error_log("No tickets found in repository result");
+            }
+            
+            return $this->json([
+                'success' => true,
+                'tickets' => $tickets,
+                'count' => count($tickets),
+                'totalCount' => $totalTicketCount
+            ], Response::HTTP_OK, [], ['groups' => 'ticket:read']);
+        } catch (\Exception $e) {
+            error_log("Exception in getTickets: " . $e->getMessage() . "\n" . $e->getTraceAsString());
+            return $this->json([
+                'success' => false,
+                'message' => 'Error fetching tickets: ' . $e->getMessage(),
+                'tickets' => []
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    #[Route('/status', methods: ['GET'])]
+    public function getTicketStatuses(): JsonResponse
+    {
+        try {
+            $statuses = $this->ticketStatusRepository->findAll();
+            
+            if (empty($statuses)) {
+                error_log("No ticket statuses found in the database");
+            } else {
+                error_log("Found " . count($statuses) . " ticket statuses");
+            }
+            
+            return $this->json([
+                'success' => true,
+                'statuses' => $statuses
+            ], Response::HTTP_OK, [], ['groups' => 'ticket:read']);
+        } catch (\Exception $e) {
+            error_log("Exception in getTicketStatuses: " . $e->getMessage());
+            return $this->json([
+                'success' => false,
+                'message' => 'Erreur serveur: ' . $e->getMessage(),
+                'code' => 'SERVER_ERROR'
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    #[Route('/raw-data', methods: ['GET'])]
+    public function getRawTickets(): JsonResponse
+    {
+        try {
+            /** @var User $user */
+            $user = $this->getUser();
+            
+            if (!$user) {
+                error_log("User not authenticated in getRawTickets");
+                return $this->json([
+                    'success' => false,
+                    'message' => 'User not authenticated'
+                ], Response::HTTP_UNAUTHORIZED);
+            }
+            
+            error_log("User authenticated: ID=" . $user->getId() . ", Email=" . $user->getEmail());
+            
+            // Check if user is admin
+            $isAdmin = false;
+            
+            // Method 1: Check via security system
+            if ($this->isGranted('ROLE_ADMIN') || $this->isGranted('ROLE_SUPER_ADMIN')) {
+                error_log("Admin access granted via isGranted");
+                $isAdmin = true;
+            } else {
+                error_log("isGranted check failed, checking user roles directly");
+                
+                // Method 2: Check via user roles as a fallback
+                if ($user->getRoles() && is_array($user->getRoles())) {
+                    error_log("User roles from getRoles(): " . implode(', ', $user->getRoles()));
+                    if (in_array('ROLE_ADMIN', $user->getRoles()) || in_array('ROLE_SUPER_ADMIN', $user->getRoles())) {
+                        error_log("Admin access granted via getRoles");
+                        $isAdmin = true;
+                    }
+                }
+                
+                // Method 3: Check via getUserRoles if available
+                if (method_exists($user, 'getUserRoles')) {
+                    foreach ($user->getUserRoles() as $userRole) {
+                        error_log("User role from getUserRoles: " . $userRole->getRole()->getName());
+                        if (in_array($userRole->getRole()->getName(), ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                            error_log("Admin access granted via getUserRoles");
+                            $isAdmin = true;
+                            break;
+                        }
+                    }
+                }
+            }
+            
+            if (!$isAdmin) {
+                error_log("Access denied - user is not admin");
+                return $this->json([
+                    'success' => false,
+                    'message' => 'Access denied'
+                ], Response::HTTP_FORBIDDEN);
+            }
+            
+            // Get raw data directly from database
+            $connection = $this->entityManager->getConnection();
+            $sql = 'SELECT t.*, s.name as status_name, u.first_name, u.last_name 
+                    FROM ticket t 
+                    LEFT JOIN ticket_status s ON t.status_id = s.id
+                    LEFT JOIN user u ON t.creator_id = u.id
+                    ORDER BY t.created_at DESC';
+            $stmt = $connection->prepare($sql);
+            $result = $stmt->executeQuery();
+            $rawTickets = $result->fetchAllAssociative();
+            
+            error_log("Raw tickets query returned " . count($rawTickets) . " tickets");
+            
+            // Return the raw data
+            return $this->json([
+                'success' => true,
+                'rawTickets' => $rawTickets,
+                'count' => count($rawTickets)
+            ], Response::HTTP_OK);
+        
+        } catch (\Exception $e) {
+            error_log("Exception in getRawTickets: " . $e->getMessage() . "\n" . $e->getTraceAsString());
+            return $this->json([
+                'success' => false,
+                'message' => 'Error fetching raw tickets: ' . $e->getMessage()
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    #[Route('/{id}', methods: ['GET'])]
+    public function getTicket(string $id): JsonResponse
+    {
+        try {
+            // Debug: Log the received ID
+            error_log("getTicket called for ID: " . $id);
+            
+            // Cast to integer with validation
+            $ticketId = (int)$id;
+            error_log("Converted ticket ID: " . $ticketId);
+            
+            // Try to find the ticket
+            $ticket = $this->ticketRepository->find($ticketId);
+            error_log("Ticket found: " . ($ticket ? 'Yes' : 'No'));
+            
+            if (!$ticket) {
+                return $this->json([
+                    'success' => false,
+                    'message' => 'Ticket non trouvé',
+                    'requested_id' => $id
+                ], Response::HTTP_NOT_FOUND);
+            }
+            
+            /** @var User $user */
+            $user = $this->getUser();
+            error_log("User authenticated: ID=" . $user->getId() . ", Email=" . $user->getEmail());
+            
+            // Check if user is admin or the creator of the ticket - check both ways
+            $isAdmin = false;
+            
+            // Method 1: Check via security system
+            if ($this->isGranted('ROLE_ADMIN') || $this->isGranted('ROLE_SUPER_ADMIN')) {
+                error_log("Admin access granted via isGranted");
+                $isAdmin = true;
+            } else {
+                error_log("isGranted check failed, checking user roles directly");
+                
+                // Method 2: Check via user roles as a fallback
+                if ($user->getRoles() && is_array($user->getRoles())) {
+                    error_log("User roles from getRoles(): " . implode(', ', $user->getRoles()));
+                    if (in_array('ROLE_ADMIN', $user->getRoles()) || in_array('ROLE_SUPER_ADMIN', $user->getRoles())) {
+                        error_log("Admin access granted via getRoles");
+                        $isAdmin = true;
+                    }
+                }
+                
+                // Method 3: Check via getUserRoles if available
+                if (method_exists($user, 'getUserRoles')) {
+                    foreach ($user->getUserRoles() as $userRole) {
+                        error_log("User role from getUserRoles: " . $userRole->getRole()->getName());
+                        if (in_array($userRole->getRole()->getName(), ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                            error_log("Admin access granted via getUserRoles");
+                            $isAdmin = true;
+                            break;
+                        }
+                    }
+                }
+            }
+            
+            error_log("Admin check final result: " . ($isAdmin ? 'Is Admin' : 'Not Admin'));
+            error_log("Creator check: User ID=" . $user->getId() . ", Ticket Creator ID=" . $ticket->getCreator()->getId());
+            error_log("Creator match: " . ($ticket->getCreator()->getId() === $user->getId() ? 'Yes' : 'No'));
+            
+            if (!$isAdmin && $ticket->getCreator()->getId() !== $user->getId()) {
+                error_log("Access denied: User is not admin and not ticket creator");
+                return $this->json([
+                    'success' => false,
+                    'message' => 'Accès refusé'
+                ], Response::HTTP_FORBIDDEN);
+            }
+            
+            error_log("Access granted to ticket #" . $ticket->getId());
+            return $this->json([
+                'success' => true,
+                'ticket' => $ticket
+            ], Response::HTTP_OK, [], ['groups' => 'ticket:read']);
+            
+        } catch (\Exception $e) {
+            error_log("Exception in getTicket: " . $e->getMessage() . "\n" . $e->getTraceAsString());
+            return $this->json([
+                'success' => false,
+                'message' => 'Erreur serveur: ' . $e->getMessage(),
+                'code' => 'SERVER_ERROR'
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    #[Route('', methods: ['POST'])]
+    public function createTicket(Request $request): JsonResponse
+    {
+        /** @var User $user */
+        $user = $this->getUser();
+        
+        if (!$user) {
+            return $this->json(['message' => 'Authentication required'], Response::HTTP_UNAUTHORIZED);
+        }
+        
+        $data = json_decode($request->getContent(), true);
+        
+        if (!isset($data['title']) || !isset($data['description'])) {
+            return $this->json(['message' => 'Title and description are required'], Response::HTTP_BAD_REQUEST);
+        }
+        
+        // Get default "Open" status
+        $openStatus = $this->ticketStatusRepository->findOneBy(['name' => 'Ouvert']);
+        
+        if (!$openStatus) {
+            return $this->json(['message' => 'Statut par défaut introuvable'], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+        
+        $ticket = new Ticket();
+        $ticket->setTitle($data['title']);
+        $ticket->setDescription($data['description']);
+        $ticket->setCreator($user);
+        $ticket->setStatus($openStatus);
+        
+        // Set a default priority rather than allowing the user to set it
+        $ticket->setPriority('Normal');
+        
+        // Handle service if it's present in the request
+        if (isset($data['serviceId']) && !empty($data['serviceId'])) {
+            $service = $this->ticketServiceRepository->find($data['serviceId']);
+            if ($service) {
+                $ticket->setService($service);
+            } else {
+                return $this->json(['message' => 'Service introuvable'], Response::HTTP_BAD_REQUEST);
+            }
+        }
+        
+        $this->entityManager->persist($ticket);
+        $this->entityManager->flush();
+        
+        // Send email notification to user
+        $this->sendEmailNotification($user, $ticket);
+        
+        // Notify admins about all new tickets
+        $this->notifyAdmins($ticket);
+        
+        // Check if user is admin
+        $isAdmin = false;
+        if ($this->isGranted('ROLE_ADMIN') || $this->isGranted('ROLE_SUPER_ADMIN')) {
+            $isAdmin = true;
+        } else {
+            foreach ($user->getUserRoles() as $userRole) {
+                if (in_array($userRole->getRole()->getName(), ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                    $isAdmin = true;
+                    break;
+                }
+            }
+        }
+        
+        return $this->json([
+            'success' => true,
+            'message' => 'Ticket créé avec succès',
+            'ticket' => $ticket,
+            'isAdmin' => $isAdmin
+        ], Response::HTTP_CREATED, [], ['groups' => 'ticket:read']);
+    }
+
+    #[Route('/{id}', methods: ['PUT'])]
+    public function updateTicket(string $id, Request $request): JsonResponse
+    {
+        try {
+            error_log("updateTicket called for ID: " . $id);
+            $ticket = $this->ticketRepository->find((int)$id);
+            
+            if (!$ticket) {
+                error_log("Ticket not found: " . $id);
+                return $this->json(['message' => 'Ticket non trouvé'], Response::HTTP_NOT_FOUND);
+            }
+            
+            error_log("Found ticket: ID=" . $ticket->getId() . ", Title=" . $ticket->getTitle());
+            
+            /** @var User $user */
+            $user = $this->getUser();
+            error_log("User authenticated: ID=" . $user->getId() . ", Email=" . $user->getEmail());
+            
+            // Check if user is admin or the creator of the ticket - check both ways
+            $isAdmin = false;
+            
+            // Method 1: Check via security system
+            if ($this->isGranted('ROLE_ADMIN') || $this->isGranted('ROLE_SUPER_ADMIN')) {
+                error_log("Admin access granted via isGranted");
+                $isAdmin = true;
+            } else {
+                error_log("isGranted check failed, checking user roles directly");
+                
+                // Method 2: Check via user roles as a fallback
+                if ($user->getRoles() && is_array($user->getRoles())) {
+                    error_log("User roles from getRoles(): " . implode(', ', $user->getRoles()));
+                    if (in_array('ROLE_ADMIN', $user->getRoles()) || in_array('ROLE_SUPER_ADMIN', $user->getRoles())) {
+                        error_log("Admin access granted via getRoles");
+                        $isAdmin = true;
+                    }
+                }
+                
+                // Method 3: Check via getUserRoles if available
+                if (method_exists($user, 'getUserRoles')) {
+                    foreach ($user->getUserRoles() as $userRole) {
+                        error_log("User role from getUserRoles: " . $userRole->getRole()->getName());
+                        if (in_array($userRole->getRole()->getName(), ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                            error_log("Admin access granted via getUserRoles");
+                            $isAdmin = true;
+                            break;
+                        }
+                    }
+                }
+            }
+            
+            error_log("Admin check final result: " . ($isAdmin ? 'Is Admin' : 'Not Admin'));
+            error_log("Creator check: User ID=" . $user->getId() . ", Ticket Creator ID=" . $ticket->getCreator()->getId());
+            error_log("Creator match: " . ($ticket->getCreator()->getId() === $user->getId() ? 'Yes' : 'No'));
+            
+            if (!$isAdmin && $ticket->getCreator()->getId() !== $user->getId()) {
+                error_log("Access denied: User is not admin and not ticket creator");
+                return $this->json(['message' => 'Accès refusé'], Response::HTTP_FORBIDDEN);
+            }
+            
+            $data = json_decode($request->getContent(), true);
+            error_log("Update data: " . json_encode($data));
+            
+            if (isset($data['title'])) {
+                $ticket->setTitle($data['title']);
+            }
+            
+            if (isset($data['description'])) {
+                $ticket->setDescription($data['description']);
+            }
+            
+            // Only admins can update priority
+            if (isset($data['priority']) && $isAdmin) {
+                error_log("Updating priority from " . $ticket->getPriority() . " to " . $data['priority']);
+                $ticket->setPriority($data['priority']);
+            }
+            
+            if (isset($data['statusId']) && $isAdmin) {
+                error_log("Trying to update status to ID: " . $data['statusId']);
+                $status = $this->ticketStatusRepository->find($data['statusId']);
+                
+                if ($status) {
+                    error_log("Found status: " . $status->getName());
+                    error_log("Updating status from " . ($ticket->getStatus() ? $ticket->getStatus()->getName() : 'null') . " to " . $status->getName());
+                    $ticket->setStatus($status);
+                    
+                    // If status is "Resolved", set resolvedAt datetime
+                    if ($status->getName() === 'Résolu') {
+                        error_log("Setting resolvedAt to now");
+                        $ticket->setResolvedAt(new \DateTimeImmutable());
+                    }
+                } else {
+                    error_log("Status not found for ID: " . $data['statusId']);
+                }
+            }
+            
+            $ticket->setUpdatedAt(new \DateTimeImmutable());
+            
+            error_log("About to flush changes");
+            $this->entityManager->flush();
+            error_log("Changes flushed to database");
+            
+            return $this->json([
+                'message' => 'Ticket updated successfully',
+                'ticket' => $ticket
+            ], Response::HTTP_OK, [], ['groups' => 'ticket:read']);
+        } catch (\Exception $e) {
+            error_log("Exception in updateTicket: " . $e->getMessage() . "\n" . $e->getTraceAsString());
+            return $this->json([
+                'success' => false,
+                'message' => 'Erreur serveur: ' . $e->getMessage(),
+                'code' => 'SERVER_ERROR'
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    #[Route('/{id}/assign', name: 'assign_ticket', methods: ['PUT'])]
+    public function assignTicket(Request $request, Ticket $ticket, UserRepository $userRepository): JsonResponse
+    {
+        $data = json_decode($request->getContent(), true);
+        
+        // Check if assignedToId is provided
+        if (!isset($data['assignedToId'])) {
+            return $this->json([
+                'message' => 'User ID is required'
+            ], Response::HTTP_BAD_REQUEST);
+        }
+        
+        // Find the user to assign the ticket to
+        $assignedTo = $userRepository->find($data['assignedToId']);
+        
+        if (!$assignedTo) {
+            return $this->json([
+                'message' => 'User not found'
+            ], Response::HTTP_NOT_FOUND);
+        }
+        
+        // Update the ticket
+        $ticket->setAssignedTo($assignedTo);
+        $this->entityManager->flush();
+        
+        return $this->json([
+            'message' => 'Ticket assigned successfully',
+            'ticket' => $ticket
+        ], Response::HTTP_OK, [], ['groups' => 'ticket:read']);
+    }
+
+    #[Route('/actions/bulk-update-status', name: 'api_bulk_update_ticket_status', methods: ['PUT'])]
+    public function bulkUpdateStatus(Request $request): JsonResponse
+    {
+        try {
+            error_log("========= BULK UPDATE STATUS REACHED =========");
+            error_log("Request content: " . $request->getContent());
+            
+            $user = $this->getUser();
+            if (!$user) {
+                error_log("Authentication failed - no user found");
+                return $this->json(['message' => 'User not authenticated'], Response::HTTP_UNAUTHORIZED);
+            }
+
+            error_log("Authenticated user: " . $user->getEmail());
+            
+            // Check if user is admin
+            $isAdmin = false;
+            foreach ($user->getUserRoles() as $userRole) {
+                error_log("User role: " . $userRole->getRole()->getName());
+                if (in_array($userRole->getRole()->getName(), ['ROLE_ADMIN', 'ROLE_SUPER_ADMIN'])) {
+                    $isAdmin = true;
+                    break;
+                }
+            }
+
+            if (!$isAdmin) {
+                error_log("Access denied - user is not admin");
+                return $this->json(['message' => 'Access denied'], Response::HTTP_FORBIDDEN);
+            }
+
+            error_log("Admin access confirmed");
+            $data = json_decode($request->getContent(), true);
+            error_log("Decoded data: " . json_encode($data));
+
+            if (!isset($data['ticketIds']) || !isset($data['statusId'])) {
+                error_log("Missing required fields: ticketIds or statusId");
+                return $this->json([
+                    'success' => false,
+                    'message' => 'ticketIds and statusId are required'
+                ], Response::HTTP_BAD_REQUEST);
+            }
+
+            $status = $this->ticketStatusRepository->find($data['statusId']);
+            if (!$status) {
+                return $this->json([
+                    'success' => false,
+                    'message' => 'Invalid status ID'
+                ], Response::HTTP_BAD_REQUEST);
+            }
+
+            $updatedCount = 0;
+            $errors = [];
+
+            foreach ($data['ticketIds'] as $ticketId) {
+                $ticket = $this->ticketRepository->find($ticketId);
+                if (!$ticket) {
+                    $errors[] = "Ticket #{$ticketId} not found";
+                    continue;
+                }
+
+                $ticket->setStatus($status);
+                
+                // If status is "Résolu", set resolvedAt
+                if ($status->getName() === 'Résolu') {
+                    $ticket->setResolvedAt(new \DateTimeImmutable());
+                }
+
+                $updatedCount++;
+            }
+
+            $this->entityManager->flush();
+
+            return $this->json([
+                'success' => true,
+                'message' => "Successfully updated {$updatedCount} tickets",
+                'updatedCount' => $updatedCount,
+                'errors' => $errors
+            ]);
+
+        } catch (\Exception $e) {
+            error_log('Error in bulkUpdateStatus: ' . $e->getMessage());
+            error_log($e->getTraceAsString());
+            return $this->json([
+                'success' => false,
+                'message' => 'Error updating tickets: ' . $e->getMessage()
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    #[Route('/custom-bulk-update', methods: ['POST'])]
+    public function customBulkUpdate(Request $request): JsonResponse
+    {
+        try {
+            error_log("========= CUSTOM BULK UPDATE REACHED =========");
+            
+            $data = json_decode($request->getContent(), true);
+            error_log("Received data: " . json_encode($data));
+            
+            if (!isset($data['ticketIds']) || !isset($data['statusId'])) {
+                return $this->json([
+                    'success' => false,
+                    'message' => 'ticketIds and statusId are required'
+                ], Response::HTTP_BAD_REQUEST);
+            }
+            
+            $status = $this->ticketStatusRepository->find($data['statusId']);
+            if (!$status) {
+                return $this->json([
+                    'success' => false,
+                    'message' => 'Invalid status ID'
+                ], Response::HTTP_BAD_REQUEST);
+            }
+            
+            $updatedCount = 0;
+            $errors = [];
+            
+            foreach ($data['ticketIds'] as $ticketId) {
+                $ticket = $this->ticketRepository->find($ticketId);
+                if (!$ticket) {
+                    $errors[] = "Ticket #{$ticketId} not found";
+                    continue;
+                }
+                
+                $ticket->setStatus($status);
+                
+                // If status is "Résolu", set resolvedAt
+                if ($status->getName() === 'Résolu') {
+                    $ticket->setResolvedAt(new \DateTimeImmutable());
+                }
+                
+                $updatedCount++;
+            }
+            
+            $this->entityManager->flush();
+            
+            return $this->json([
+                'success' => true,
+                'message' => "Successfully updated {$updatedCount} tickets",
+                'updatedCount' => $updatedCount,
+                'errors' => $errors
+            ]);
+            
+        } catch (\Exception $e) {
+            error_log('Error in customBulkUpdate: ' . $e->getMessage());
+            error_log($e->getTraceAsString());
+            return $this->json([
+                'success' => false,
+                'message' => 'Error updating tickets: ' . $e->getMessage()
+            ], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+
+    private function sendEmailNotification(User $user, Ticket $ticket): void
+    {
+        $email = (new Email())
+            ->from('noreply@yourcompany.com')
+            ->to($user->getEmail())
+            ->subject('Your Support Ticket Has Been Created')
+            ->text("Hello {$user->getFirstName()},\n\nYour support ticket has been created with the following details:\n\nTitle: {$ticket->getTitle()}\nID: {$ticket->getId()}\n\nWe will get back to you as soon as possible.")
+            ->html("<p>Hello {$user->getFirstName()},</p><p>Your support ticket has been created with the following details:</p><p><strong>Title:</strong> {$ticket->getTitle()}<br><strong>ID:</strong> {$ticket->getId()}</p><p>We will get back to you as soon as possible.</p>");
+        
+        $this->mailer->send($email);
+    }
+
+    private function notifyAdmins(Ticket $ticket): void
+    {
+        // In a real implementation, you would query for admin users
+        // For this example, we'll just log that we would send emails to admins
+        // $adminEmails = [...];
+        // foreach ($adminEmails as $adminEmail) {
+        //     $email = (new Email())...
+        //     $this->mailer->send($email);
+        // }
+    }
+
+    #[Route('/tools/debug-token', methods: ['GET'])]
+    public function debugToken(): JsonResponse
+    {
+        try {
+            $user = $this->getUser();
+            if (!$user) {
+                return $this->json(['message' => 'User not authenticated'], Response::HTTP_UNAUTHORIZED);
+            }
+            
+            $debug = [
+                'user_id' => $user->getId(),
+                'email' => $user->getEmail(),
+                'isGranted_ROLE_ADMIN' => $this->isGranted('ROLE_ADMIN'),
+                'isGranted_ROLE_SUPER_ADMIN' => $this->isGranted('ROLE_SUPER_ADMIN'),
+            ];
+            
+            // Check direct roles from security
+            if (method_exists($user, 'getRoles')) {
+                $debug['getRoles'] = $user->getRoles();
+            }
+            
+            // Check UserRole entities
+            if (method_exists($user, 'getUserRoles')) {
+                $userRoles = [];
+                foreach ($user->getUserRoles() as $userRole) {
+                    $userRoles[] = $userRole->getRole()->getName();
+                }
+                $debug['getUserRoles'] = $userRoles;
+            }
+            
+            return $this->json($debug);
+        } catch (\Exception $e) {
+            return $this->json(['error' => $e->getMessage()], Response::HTTP_INTERNAL_SERVER_ERROR);
+        }
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Controller/TicketServiceController.php b/backend/src/Controller/TicketServiceController.php
new file mode 100644
index 0000000..6b9a9e3
--- /dev/null
+++ b/backend/src/Controller/TicketServiceController.php
@@ -0,0 +1,132 @@
+<?php
+
+namespace App\Controller;
+
+use App\Entity\TicketService;
+use App\Repository\TicketServiceRepository;
+use Doctrine\ORM\EntityManagerInterface;
+use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\Routing\Annotation\Route;
+use Symfony\Component\Serializer\SerializerInterface;
+
+#[Route('/api/ticket-services')]
+class TicketServiceController extends AbstractController
+{
+    private EntityManagerInterface $entityManager;
+    private SerializerInterface $serializer;
+    private TicketServiceRepository $ticketServiceRepository;
+
+    public function __construct(
+        EntityManagerInterface $entityManager,
+        SerializerInterface $serializer,
+        TicketServiceRepository $ticketServiceRepository
+    ) {
+        $this->entityManager = $entityManager;
+        $this->serializer = $serializer;
+        $this->ticketServiceRepository = $ticketServiceRepository;
+    }
+
+    #[Route('', methods: ['GET'])]
+    public function getAllServices(): JsonResponse
+    {
+        $services = $this->ticketServiceRepository->findAll();
+
+        return $this->json(
+            $services,
+            Response::HTTP_OK,
+            [],
+            ['groups' => 'ticketService:read']
+        );
+    }
+
+    #[Route('/{id}', methods: ['GET'])]
+    public function getService(int $id): JsonResponse
+    {
+        $service = $this->ticketServiceRepository->find($id);
+
+        if (!$service) {
+            return $this->json(['error' => 'Service not found'], Response::HTTP_NOT_FOUND);
+        }
+
+        return $this->json(
+            $service,
+            Response::HTTP_OK,
+            [],
+            ['groups' => 'ticketService:read']
+        );
+    }
+
+    #[Route('', methods: ['POST'])]
+    public function createService(Request $request): JsonResponse
+    {
+        $data = json_decode($request->getContent(), true);
+
+        if (!isset($data['name']) || empty($data['name'])) {
+            return $this->json(['error' => 'Service name is required'], Response::HTTP_BAD_REQUEST);
+        }
+
+        $service = new TicketService();
+        $service->setName($data['name']);
+        
+        if (isset($data['description'])) {
+            $service->setDescription($data['description']);
+        }
+
+        $this->entityManager->persist($service);
+        $this->entityManager->flush();
+
+        return $this->json(
+            $service,
+            Response::HTTP_CREATED,
+            [],
+            ['groups' => 'ticketService:read']
+        );
+    }
+
+    #[Route('/{id}', methods: ['PUT'])]
+    public function updateService(int $id, Request $request): JsonResponse
+    {
+        $service = $this->ticketServiceRepository->find($id);
+
+        if (!$service) {
+            return $this->json(['error' => 'Service not found'], Response::HTTP_NOT_FOUND);
+        }
+
+        $data = json_decode($request->getContent(), true);
+
+        if (isset($data['name']) && !empty($data['name'])) {
+            $service->setName($data['name']);
+        }
+
+        if (isset($data['description'])) {
+            $service->setDescription($data['description']);
+        }
+
+        $this->entityManager->flush();
+
+        return $this->json(
+            $service,
+            Response::HTTP_OK,
+            [],
+            ['groups' => 'ticketService:read']
+        );
+    }
+
+    #[Route('/{id}', methods: ['DELETE'])]
+    public function deleteService(int $id): JsonResponse
+    {
+        $service = $this->ticketServiceRepository->find($id);
+
+        if (!$service) {
+            return $this->json(['error' => 'Service not found'], Response::HTTP_NOT_FOUND);
+        }
+
+        $this->entityManager->remove($service);
+        $this->entityManager->flush();
+
+        return $this->json(null, Response::HTTP_NO_CONTENT);
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/DataFixtures/TicketServiceFixtures.php b/backend/src/DataFixtures/TicketServiceFixtures.php
new file mode 100644
index 0000000..a1d6e76
--- /dev/null
+++ b/backend/src/DataFixtures/TicketServiceFixtures.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace App\DataFixtures;
+
+use App\Entity\TicketService;
+use Doctrine\Bundle\FixturesBundle\Fixture;
+use Doctrine\Persistence\ObjectManager;
+
+class TicketServiceFixtures extends Fixture
+{
+    public function load(ObjectManager $manager): void
+    {
+        $services = [
+            [
+                'name' => 'Support technique',
+                'description' => 'Problèmes techniques liés à l\'application ou au site web'
+            ],
+            [
+                'name' => 'Facturation',
+                'description' => 'Questions concernant vos factures ou paiements'
+            ],
+            [
+                'name' => 'Contenu pédagogique',
+                'description' => 'Questions ou problèmes liés au contenu des cours'
+            ],
+            [
+                'name' => 'Accès aux cours',
+                'description' => 'Problèmes d\'accès aux cours ou aux ressources pédagogiques'
+            ],
+            [
+                'name' => 'Suggestion',
+                'description' => 'Suggestions pour améliorer la plateforme ou les cours'
+            ],
+            [
+                'name' => 'Autre',
+                'description' => 'Toute autre demande ne correspondant pas aux catégories ci-dessus'
+            ],
+        ];
+
+        foreach ($services as $serviceData) {
+            $service = new TicketService();
+            $service->setName($serviceData['name']);
+            $service->setDescription($serviceData['description']);
+            
+            $manager->persist($service);
+            
+            // Add reference for use in other fixtures
+            $this->addReference('ticket-service-' . strtolower(str_replace(' ', '-', $serviceData['name'])), $service);
+        }
+
+        $manager->flush();
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/DataFixtures/TicketStatusFixtures.php b/backend/src/DataFixtures/TicketStatusFixtures.php
new file mode 100644
index 0000000..81d953f
--- /dev/null
+++ b/backend/src/DataFixtures/TicketStatusFixtures.php
@@ -0,0 +1,61 @@
+<?php
+
+namespace App\DataFixtures;
+
+use App\Entity\TicketStatus;
+use Doctrine\Bundle\FixturesBundle\Fixture;
+use Doctrine\Persistence\ObjectManager;
+
+class TicketStatusFixtures extends Fixture
+{
+    public const STATUS_OPEN = 'status-open';
+    public const STATUS_IN_PROGRESS = 'status-in-progress';
+    public const STATUS_RESOLVED = 'status-resolved';
+    public const STATUS_CLOSED = 'status-closed';
+    public const STATUS_PENDING = 'status-pending';
+
+    public function load(ObjectManager $manager): void
+    {
+        $statuses = [
+            self::STATUS_OPEN => [
+                'name' => 'Ouvert',
+                'description' => 'Ticket ouvert en attente de traitement',
+                'color' => '#3498db'
+            ],
+            self::STATUS_IN_PROGRESS => [
+                'name' => 'En cours',
+                'description' => 'Ticket en cours de traitement',
+                'color' => '#f39c12'
+            ],
+            self::STATUS_RESOLVED => [
+                'name' => 'Résolu',
+                'description' => 'Ticket résolu',
+                'color' => '#2ecc71'
+            ],
+            self::STATUS_CLOSED => [
+                'name' => 'Fermé',
+                'description' => 'Ticket fermé',
+                'color' => '#7f8c8d'
+            ],
+            self::STATUS_PENDING => [
+                'name' => 'En attente',
+                'description' => 'En attente d\'informations supplémentaires',
+                'color' => '#e74c3c'
+            ]
+        ];
+
+        foreach ($statuses as $reference => $data) {
+            $status = new TicketStatus();
+            $status->setName($data['name']);
+            $status->setDescription($data['description']);
+            $status->setColor($data['color']);
+            
+            $manager->persist($status);
+            
+            // Store the reference to use in other fixtures
+            $this->addReference($reference, $status);
+        }
+
+        $manager->flush();
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Entity/Ticket.php b/backend/src/Entity/Ticket.php
new file mode 100644
index 0000000..3dcc4e5
--- /dev/null
+++ b/backend/src/Entity/Ticket.php
@@ -0,0 +1,227 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\TicketRepository;
+use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
+use Doctrine\DBAL\Types\Types;
+use Doctrine\ORM\Mapping as ORM;
+use Symfony\Component\Serializer\Annotation\Groups;
+
+#[ORM\Entity(repositoryClass: TicketRepository::class)]
+class Ticket
+{
+    #[ORM\Id]
+    #[ORM\GeneratedValue]
+    #[ORM\Column]
+    #[Groups(['ticket:read'])]
+    private ?int $id = null;
+
+    #[ORM\Column(length: 255)]
+    #[Groups(['ticket:read'])]
+    private ?string $title = null;
+
+    #[ORM\Column(type: Types::TEXT)]
+    #[Groups(['ticket:read'])]
+    private ?string $description = null;
+
+    #[ORM\ManyToOne(inversedBy: 'tickets')]
+    #[ORM\JoinColumn(nullable: false)]
+    #[Groups(['ticket:read'])]
+    private ?User $creator = null;
+
+    #[ORM\ManyToOne(inversedBy: 'assignedTickets')]
+    #[Groups(['ticket:read'])]
+    private ?User $assignedTo = null;
+
+    #[ORM\ManyToOne(inversedBy: 'tickets')]
+    #[ORM\JoinColumn(nullable: false)]
+    #[Groups(['ticket:read'])]
+    private ?TicketStatus $status = null;
+
+    #[ORM\Column]
+    #[Groups(['ticket:read'])]
+    private ?\DateTimeImmutable $createdAt = null;
+
+    #[ORM\Column(nullable: true)]
+    #[Groups(['ticket:read'])]
+    private ?\DateTimeImmutable $updatedAt = null;
+
+    #[ORM\Column(length: 50, nullable: true)]
+    #[Groups(['ticket:read'])]
+    private ?string $priority = null;
+
+    #[ORM\Column(nullable: true)]
+    #[Groups(['ticket:read'])]
+    private ?\DateTimeImmutable $resolvedAt = null;
+
+    #[ORM\ManyToOne(inversedBy: 'tickets')]
+    #[Groups(['ticket:read'])]
+    private ?TicketService $service = null;
+
+    #[ORM\OneToMany(mappedBy: 'ticket', targetEntity: TicketComment::class, orphanRemoval: true)]
+    #[Groups(['ticket:read'])]
+    private Collection $comments;
+
+    public function __construct()
+    {
+        $this->createdAt = new \DateTimeImmutable();
+        $this->comments = new ArrayCollection();
+    }
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getTitle(): ?string
+    {
+        return $this->title;
+    }
+
+    public function setTitle(string $title): static
+    {
+        $this->title = $title;
+
+        return $this;
+    }
+
+    public function getDescription(): ?string
+    {
+        return $this->description;
+    }
+
+    public function setDescription(string $description): static
+    {
+        $this->description = $description;
+
+        return $this;
+    }
+
+    public function getCreator(): ?User
+    {
+        return $this->creator;
+    }
+
+    public function setCreator(?User $creator): static
+    {
+        $this->creator = $creator;
+
+        return $this;
+    }
+
+    public function getAssignedTo(): ?User
+    {
+        return $this->assignedTo;
+    }
+
+    public function setAssignedTo(?User $assignedTo): static
+    {
+        $this->assignedTo = $assignedTo;
+
+        return $this;
+    }
+
+    public function getStatus(): ?TicketStatus
+    {
+        return $this->status;
+    }
+
+    public function setStatus(?TicketStatus $status): static
+    {
+        $this->status = $status;
+
+        return $this;
+    }
+
+    public function getCreatedAt(): ?\DateTimeImmutable
+    {
+        return $this->createdAt;
+    }
+
+    public function setCreatedAt(\DateTimeImmutable $createdAt): static
+    {
+        $this->createdAt = $createdAt;
+
+        return $this;
+    }
+
+    public function getUpdatedAt(): ?\DateTimeImmutable
+    {
+        return $this->updatedAt;
+    }
+
+    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): static
+    {
+        $this->updatedAt = $updatedAt;
+
+        return $this;
+    }
+
+    public function getPriority(): ?string
+    {
+        return $this->priority;
+    }
+
+    public function setPriority(?string $priority): static
+    {
+        $this->priority = $priority;
+
+        return $this;
+    }
+
+    public function getResolvedAt(): ?\DateTimeImmutable
+    {
+        return $this->resolvedAt;
+    }
+
+    public function setResolvedAt(?\DateTimeImmutable $resolvedAt): static
+    {
+        $this->resolvedAt = $resolvedAt;
+
+        return $this;
+    }
+
+    public function getService(): ?TicketService
+    {
+        return $this->service;
+    }
+
+    public function setService(?TicketService $service): static
+    {
+        $this->service = $service;
+
+        return $this;
+    }
+
+    /**
+     * @return Collection<int, TicketComment>
+     */
+    public function getComments(): Collection
+    {
+        return $this->comments;
+    }
+
+    public function addComment(TicketComment $comment): static
+    {
+        if (!$this->comments->contains($comment)) {
+            $this->comments->add($comment);
+            $comment->setTicket($this);
+        }
+
+        return $this;
+    }
+
+    public function removeComment(TicketComment $comment): static
+    {
+        if ($this->comments->removeElement($comment)) {
+            // set the owning side to null (unless already changed)
+            if ($comment->getTicket() === $this) {
+                $comment->setTicket(null);
+            }
+        }
+
+        return $this;
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Entity/TicketComment.php b/backend/src/Entity/TicketComment.php
new file mode 100644
index 0000000..16f31bb
--- /dev/null
+++ b/backend/src/Entity/TicketComment.php
@@ -0,0 +1,107 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\TicketCommentRepository;
+use Doctrine\ORM\Mapping as ORM;
+use Symfony\Component\Serializer\Annotation\Groups;
+
+#[ORM\Entity(repositoryClass: TicketCommentRepository::class)]
+class TicketComment
+{
+    #[ORM\Id]
+    #[ORM\GeneratedValue]
+    #[ORM\Column]
+    #[Groups(['ticket:read', 'comment:read'])]
+    private ?int $id = null;
+
+    #[ORM\Column(type: 'text')]
+    #[Groups(['ticket:read', 'comment:read'])]
+    private ?string $content = null;
+
+    #[ORM\Column]
+    #[Groups(['ticket:read', 'comment:read'])]
+    private ?\DateTimeImmutable $createdAt = null;
+
+    #[ORM\ManyToOne(inversedBy: 'comments')]
+    #[ORM\JoinColumn(nullable: false)]
+    private ?Ticket $ticket = null;
+
+    #[ORM\Column]
+    #[Groups(['ticket:read', 'comment:read'])]
+    private ?bool $isFromAdmin = false;
+
+    #[ORM\ManyToOne]
+    #[Groups(['comment:read'])]
+    private ?User $author = null;
+
+    public function __construct()
+    {
+        $this->createdAt = new \DateTimeImmutable();
+    }
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getContent(): ?string
+    {
+        return $this->content;
+    }
+
+    public function setContent(string $content): static
+    {
+        $this->content = $content;
+
+        return $this;
+    }
+
+    public function getCreatedAt(): ?\DateTimeImmutable
+    {
+        return $this->createdAt;
+    }
+
+    public function setCreatedAt(\DateTimeImmutable $createdAt): static
+    {
+        $this->createdAt = $createdAt;
+
+        return $this;
+    }
+
+    public function getTicket(): ?Ticket
+    {
+        return $this->ticket;
+    }
+
+    public function setTicket(?Ticket $ticket): static
+    {
+        $this->ticket = $ticket;
+
+        return $this;
+    }
+
+    public function isIsFromAdmin(): ?bool
+    {
+        return $this->isFromAdmin;
+    }
+
+    public function setIsFromAdmin(bool $isFromAdmin): static
+    {
+        $this->isFromAdmin = $isFromAdmin;
+
+        return $this;
+    }
+
+    public function getAuthor(): ?User
+    {
+        return $this->author;
+    }
+
+    public function setAuthor(?User $author): static
+    {
+        $this->author = $author;
+
+        return $this;
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Entity/TicketService.php b/backend/src/Entity/TicketService.php
new file mode 100644
index 0000000..6c69b7b
--- /dev/null
+++ b/backend/src/Entity/TicketService.php
@@ -0,0 +1,94 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\TicketServiceRepository;
+use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
+use Doctrine\ORM\Mapping as ORM;
+use Symfony\Component\Serializer\Annotation\Groups;
+
+#[ORM\Entity(repositoryClass: TicketServiceRepository::class)]
+class TicketService
+{
+    #[ORM\Id]
+    #[ORM\GeneratedValue]
+    #[ORM\Column]
+    #[Groups(['ticket:read', 'ticketService:read'])]
+    private ?int $id = null;
+
+    #[ORM\Column(length: 255)]
+    #[Groups(['ticket:read', 'ticketService:read'])]
+    private ?string $name = null;
+
+    #[ORM\Column(length: 255, nullable: true)]
+    #[Groups(['ticket:read', 'ticketService:read'])]
+    private ?string $description = null;
+
+    #[ORM\OneToMany(mappedBy: 'service', targetEntity: Ticket::class)]
+    private Collection $tickets;
+
+    public function __construct()
+    {
+        $this->tickets = new ArrayCollection();
+    }
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getName(): ?string
+    {
+        return $this->name;
+    }
+
+    public function setName(string $name): static
+    {
+        $this->name = $name;
+
+        return $this;
+    }
+
+    public function getDescription(): ?string
+    {
+        return $this->description;
+    }
+
+    public function setDescription(?string $description): static
+    {
+        $this->description = $description;
+
+        return $this;
+    }
+
+    /**
+     * @return Collection<int, Ticket>
+     */
+    public function getTickets(): Collection
+    {
+        return $this->tickets;
+    }
+
+    public function addTicket(Ticket $ticket): static
+    {
+        if (!$this->tickets->contains($ticket)) {
+            $this->tickets->add($ticket);
+            $ticket->setService($this);
+        }
+
+        return $this;
+    }
+
+    public function removeTicket(Ticket $ticket): static
+    {
+        if ($this->tickets->removeElement($ticket)) {
+            // set the owning side to null (unless already changed)
+            if ($ticket->getService() === $this) {
+                $ticket->setService(null);
+            }
+        }
+
+        return $this;
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Entity/TicketStatus.php b/backend/src/Entity/TicketStatus.php
new file mode 100644
index 0000000..f1f6e94
--- /dev/null
+++ b/backend/src/Entity/TicketStatus.php
@@ -0,0 +1,110 @@
+<?php
+
+namespace App\Entity;
+
+use App\Repository\TicketStatusRepository;
+use Doctrine\Common\Collections\ArrayCollection;
+use Doctrine\Common\Collections\Collection;
+use Doctrine\ORM\Mapping as ORM;
+use Symfony\Component\Serializer\Annotation\Groups;
+
+#[ORM\Entity(repositoryClass: TicketStatusRepository::class)]
+class TicketStatus
+{
+    #[ORM\Id]
+    #[ORM\GeneratedValue]
+    #[ORM\Column]
+    #[Groups(['ticket:read'])]
+    private ?int $id = null;
+
+    #[ORM\Column(length: 50)]
+    #[Groups(['ticket:read'])]
+    private ?string $name = null;
+
+    #[ORM\Column(length: 255, nullable: true)]
+    #[Groups(['ticket:read'])]
+    private ?string $description = null;
+
+    #[ORM\Column(length: 50, nullable: true)]
+    #[Groups(['ticket:read'])]
+    private ?string $color = null;
+
+    #[ORM\OneToMany(mappedBy: 'status', targetEntity: Ticket::class)]
+    private Collection $tickets;
+
+    public function __construct()
+    {
+        $this->tickets = new ArrayCollection();
+    }
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    public function getName(): ?string
+    {
+        return $this->name;
+    }
+
+    public function setName(string $name): static
+    {
+        $this->name = $name;
+
+        return $this;
+    }
+
+    public function getDescription(): ?string
+    {
+        return $this->description;
+    }
+
+    public function setDescription(?string $description): static
+    {
+        $this->description = $description;
+
+        return $this;
+    }
+
+    public function getColor(): ?string
+    {
+        return $this->color;
+    }
+
+    public function setColor(?string $color): static
+    {
+        $this->color = $color;
+
+        return $this;
+    }
+
+    /**
+     * @return Collection<int, Ticket>
+     */
+    public function getTickets(): Collection
+    {
+        return $this->tickets;
+    }
+
+    public function addTicket(Ticket $ticket): static
+    {
+        if (!$this->tickets->contains($ticket)) {
+            $this->tickets->add($ticket);
+            $ticket->setStatus($this);
+        }
+
+        return $this;
+    }
+
+    public function removeTicket(Ticket $ticket): static
+    {
+        if ($this->tickets->removeElement($ticket)) {
+            // set the owning side to null (unless already changed)
+            if ($ticket->getStatus() === $this) {
+                $ticket->setStatus(null);
+            }
+        }
+
+        return $this;
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Entity/User.php b/backend/src/Entity/User.php
index a36405e..275483e 100644
--- a/backend/src/Entity/User.php
+++ b/backend/src/Entity/User.php
@@ -19,23 +19,23 @@ class User implements PasswordAuthenticatedUserInterface, UserInterface
     #[ORM\Id]
     #[ORM\GeneratedValue]
     #[ORM\Column]
-    #[Groups(['user:read', 'message:read'])]
+    #[Groups(['user:read', 'message:read', 'ticket:read'])]
     private ?int $id = null;
 
     #[ORM\Column(length: 255)]
-    #[Groups(['user:read', 'message:read'])]
+    #[Groups(['user:read', 'message:read', 'ticket:read'])]
     private ?string $lastName = null;
 
     #[ORM\Column(length: 255)]
-    #[Groups(['user:read', 'message:read'])]
+    #[Groups(['user:read', 'message:read', 'ticket:read'])]
     private ?string $firstName = null;
 
     #[ORM\Column(type: Types::DATE_MUTABLE)]
     #[Groups(['user:read'])]
     private ?\DateTimeInterface $birthDate = null;
 
-    #[ORM\Column(length: 255, unique: true)]
-    #[Groups(['user:read'])]
+    #[ORM\Column(length: 180, unique: true)]
+    #[Groups(['user:read', 'ticket:read'])]
     private ?string $email = null;
 
     #[ORM\ManyToOne(inversedBy: 'users')]
@@ -116,6 +116,12 @@ class User implements PasswordAuthenticatedUserInterface, UserInterface
     #[ORM\OneToMany(mappedBy: 'user', targetEntity: UserDiploma::class, orphanRemoval: true)]
     private Collection $userDiplomas;
 
+    #[ORM\OneToMany(mappedBy: 'creator', targetEntity: Ticket::class, orphanRemoval: true)]
+    private Collection $tickets;
+
+    #[ORM\OneToMany(mappedBy: 'assignedTo', targetEntity: Ticket::class)]
+    private Collection $assignedTickets;
+
     public function __construct()
     {
         $this->createdAt = new \DateTimeImmutable();
@@ -127,6 +133,8 @@ class User implements PasswordAuthenticatedUserInterface, UserInterface
         $this->groups = new ArrayCollection();
         $this->userDiplomas = new ArrayCollection();
         $this->formations = new ArrayCollection();
+        $this->tickets = new ArrayCollection();
+        $this->assignedTickets = new ArrayCollection();
     }
 
     public function getId(): ?int
@@ -658,4 +666,64 @@ class User implements PasswordAuthenticatedUserInterface, UserInterface
         $this->profilePicturePath = $profilePicturePath;
         return $this;
     }
+
+    /**
+     * @return Collection<int, Ticket>
+     */
+    public function getTickets(): Collection
+    {
+        return $this->tickets;
+    }
+
+    public function addTicket(Ticket $ticket): static
+    {
+        if (!$this->tickets->contains($ticket)) {
+            $this->tickets->add($ticket);
+            $ticket->setCreator($this);
+        }
+
+        return $this;
+    }
+
+    public function removeTicket(Ticket $ticket): static
+    {
+        if ($this->tickets->removeElement($ticket)) {
+            // set the owning side to null (unless already changed)
+            if ($ticket->getCreator() === $this) {
+                $ticket->setCreator(null);
+            }
+        }
+
+        return $this;
+    }
+
+    /**
+     * @return Collection<int, Ticket>
+     */
+    public function getAssignedTickets(): Collection
+    {
+        return $this->assignedTickets;
+    }
+
+    public function addAssignedTicket(Ticket $ticket): static
+    {
+        if (!$this->assignedTickets->contains($ticket)) {
+            $this->assignedTickets->add($ticket);
+            $ticket->setAssignedTo($this);
+        }
+
+        return $this;
+    }
+
+    public function removeAssignedTicket(Ticket $ticket): static
+    {
+        if ($this->assignedTickets->removeElement($ticket)) {
+            // set the owning side to null (unless already changed)
+            if ($ticket->getAssignedTo() === $this) {
+                $ticket->setAssignedTo(null);
+            }
+        }
+
+        return $this;
+    }
 }
diff --git a/backend/src/Repository/TicketCommentRepository.php b/backend/src/Repository/TicketCommentRepository.php
new file mode 100644
index 0000000..7b2a3b1
--- /dev/null
+++ b/backend/src/Repository/TicketCommentRepository.php
@@ -0,0 +1,54 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\TicketComment;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @extends ServiceEntityRepository<TicketComment>
+ *
+ * @method TicketComment|null find($id, $lockMode = null, $lockVersion = null)
+ * @method TicketComment|null findOneBy(array $criteria, array $orderBy = null)
+ * @method TicketComment[]    findAll()
+ * @method TicketComment[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class TicketCommentRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, TicketComment::class);
+    }
+
+    public function save(TicketComment $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->persist($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+    public function remove(TicketComment $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->remove($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+    /**
+     * Find comments by ticket ID ordered by created date
+     */
+    public function findByTicket(int $ticketId): array
+    {
+        return $this->createQueryBuilder('c')
+            ->andWhere('c.ticket = :ticketId')
+            ->setParameter('ticketId', $ticketId)
+            ->orderBy('c.createdAt', 'ASC')
+            ->getQuery()
+            ->getResult();
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Repository/TicketRepository.php b/backend/src/Repository/TicketRepository.php
new file mode 100644
index 0000000..4c60b22
--- /dev/null
+++ b/backend/src/Repository/TicketRepository.php
@@ -0,0 +1,80 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\Ticket;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @extends ServiceEntityRepository<Ticket>
+ *
+ * @method Ticket|null find($id, $lockMode = null, $lockVersion = null)
+ * @method Ticket|null findOneBy(array $criteria, array $orderBy = null)
+ * @method Ticket[]    findAll()
+ * @method Ticket[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class TicketRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, Ticket::class);
+    }
+
+    public function save(Ticket $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->persist($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+    public function remove(Ticket $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->remove($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+    /**
+     * Find tickets by creator
+     */
+    public function findByCreator(int $userId): array
+    {
+        return $this->createQueryBuilder('t')
+            ->andWhere('t.creator = :userId')
+            ->setParameter('userId', $userId)
+            ->orderBy('t.createdAt', 'DESC')
+            ->getQuery()
+            ->getResult();
+    }
+
+    /**
+     * Find tickets assigned to a user
+     */
+    public function findByAssignedTo(int $userId): array
+    {
+        return $this->createQueryBuilder('t')
+            ->andWhere('t.assignedTo = :userId')
+            ->setParameter('userId', $userId)
+            ->orderBy('t.createdAt', 'DESC')
+            ->getQuery()
+            ->getResult();
+    }
+
+    /**
+     * Find tickets by status
+     */
+    public function findByStatus(int $statusId): array
+    {
+        return $this->createQueryBuilder('t')
+            ->andWhere('t.status = :statusId')
+            ->setParameter('statusId', $statusId)
+            ->orderBy('t.createdAt', 'DESC')
+            ->getQuery()
+            ->getResult();
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Repository/TicketServiceRepository.php b/backend/src/Repository/TicketServiceRepository.php
new file mode 100644
index 0000000..6625600
--- /dev/null
+++ b/backend/src/Repository/TicketServiceRepository.php
@@ -0,0 +1,41 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\TicketService;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @extends ServiceEntityRepository<TicketService>
+ *
+ * @method TicketService|null find($id, $lockMode = null, $lockVersion = null)
+ * @method TicketService|null findOneBy(array $criteria, array $orderBy = null)
+ * @method TicketService[]    findAll()
+ * @method TicketService[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class TicketServiceRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, TicketService::class);
+    }
+
+    public function save(TicketService $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->persist($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+    public function remove(TicketService $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->remove($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+} 
\ No newline at end of file
diff --git a/backend/src/Repository/TicketStatusRepository.php b/backend/src/Repository/TicketStatusRepository.php
new file mode 100644
index 0000000..ead0990
--- /dev/null
+++ b/backend/src/Repository/TicketStatusRepository.php
@@ -0,0 +1,41 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\TicketStatus;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @extends ServiceEntityRepository<TicketStatus>
+ *
+ * @method TicketStatus|null find($id, $lockMode = null, $lockVersion = null)
+ * @method TicketStatus|null findOneBy(array $criteria, array $orderBy = null)
+ * @method TicketStatus[]    findAll()
+ * @method TicketStatus[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class TicketStatusRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, TicketStatus::class);
+    }
+
+    public function save(TicketStatus $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->persist($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+
+    public function remove(TicketStatus $entity, bool $flush = false): void
+    {
+        $this->getEntityManager()->remove($entity);
+
+        if ($flush) {
+            $this->getEntityManager()->flush();
+        }
+    }
+} 
\ No newline at end of file
diff --git a/frontend/src/App.jsx b/frontend/src/App.jsx
index cbbc783..e8cad22 100644
--- a/frontend/src/App.jsx
+++ b/frontend/src/App.jsx
@@ -11,6 +11,7 @@ import ProfileLayout from '@/layouts/ProfileLayout'
 import StudentRoute from './components/StudentRoute'
 import { Toaster } from './components/ui/sonner'
 import { ErrorBoundary } from "react-error-boundary"
+import AdminTicketList from './components/admin/AdminTicketList'
 
 // Create a shared query client for the entire application
 const queryClient = new QueryClient({
@@ -78,6 +79,14 @@ const GuestStudentRoleManager = lazy(() => import('./pages/Recruiter/GuestStuden
 // Import du composant HomePage 
 const HomePage = lazy(() => import('./components/HomePage'))
 
+// Ticket system components
+const TicketList = lazy(() => import('./components/TicketList'))
+const TicketForm = lazy(() => import('./components/TicketForm'))
+const TicketDetail = lazy(() => import('./components/TicketDetail'))
+
+// Import the TicketServiceList component
+const TicketServiceList = lazy(() => import('./components/admin/TicketServiceList'))
+
 // Fonction optimisée pour le préchargement intelligent des pages
 // Ne charge que les pages pertinentes en fonction du contexte et du chemin actuel
 const useIntelligentPreload = () => {
@@ -447,6 +456,20 @@ const AppContent = () => {
                       </RoleGuard>
                     } />
                     
+                    {/* Ticket Service Management - Admin Only */}
+                    <Route path="/admin/ticket-services" element={
+                      <RoleGuard roles={[ROLES.ADMIN, ROLES.SUPERADMIN]} fallback={<Navigate to="/dashboard" replace />}>
+                        <TicketServiceList />
+                      </RoleGuard>
+                    } />
+                    
+                    {/* Admin Ticket Management */}
+                    <Route path="/admin/tickets" element={
+                      <RoleGuard roles={[ROLES.ADMIN, ROLES.SUPERADMIN]} fallback={<Navigate to="/dashboard" replace />}>
+                        <AdminTicketList />
+                      </RoleGuard>
+                    } />
+                    
                     {/* Routes étudiantes */}
                     <Route path="/student">
                       <Route path="dashboard" element={
@@ -530,6 +553,11 @@ const AppContent = () => {
                     } />
                   </Route>
                   
+                  {/* Ticket routes - fix double MainLayout issue */}
+                  <Route path="/tickets" element={<TicketList />} />
+                  <Route path="/tickets/new" element={<TicketForm />} />
+                  <Route path="/tickets/:id" element={<TicketDetail />} />
+                  
                   {/* Redirection des routes inconnues vers la page d'accueil */}
                   <Route path="*" element={<Navigate to="/" replace />} />
                 </Route>
diff --git a/frontend/src/components/MenuBurger.jsx b/frontend/src/components/MenuBurger.jsx
index 61dd799..40f692e 100644
--- a/frontend/src/components/MenuBurger.jsx
+++ b/frontend/src/components/MenuBurger.jsx
@@ -26,7 +26,8 @@ import {
   ChevronRight,
   X,
   Menu,
-  ClipboardCheck
+  ClipboardCheck,
+  Ticket
 } from 'lucide-react';
 import { useRolePermissions } from '@/features/roles/useRolePermissions';
 
@@ -321,6 +322,8 @@ const MenuBurger = memo(() => {
       links: [
         { name: 'Gestion des utilisateurs', to: '/admin/utilisateurs', roles: [ROLES.SUPERADMIN] },
         { name: 'Gestion des Formations', to: '/admin/formations', roles: [ROLES.SUPERADMIN] },
+        { name: 'Gestion des Services de Support', to: '/admin/ticket-services', roles: [ROLES.SUPERADMIN, ROLES.ADMIN] },
+        { name: 'Gestion des Tickets', to: '/admin/tickets', roles: [ROLES.SUPERADMIN, ROLES.ADMIN] },
         { name: 'Suivi des Inscriptions', to: '/admin/inscriptions', roles: [ROLES.SUPERADMIN] },
         { name: 'Gestion des Paiements', to: '/admin/paiements', roles: [ROLES.SUPERADMIN] },
         { name: 'Suivi des Absences', to: '/admin/absences', roles: [ROLES.SUPERADMIN] },
@@ -435,17 +438,6 @@ const MenuBurger = memo(() => {
     },
     
     // --- GENERAL ITEMS ---
-    {
-      key: 'aide',
-      label: "Besoin d'aide ?",
-      icon: <Calendar className="w-5 h-5 mr-2 text-[#528eb2]" />,
-      links: [
-        { name: 'FAQ', to: '/aide/faq' },
-        { name: 'Forum', to: '/aide/forum' },
-        { name: 'Supports', to: '/aide/supports' },
-        { name: 'Contact', to: '/aide/contact' },
-      ],
-    },
     {
       key: 'nous_rejoindre',
       label: 'Nous rejoindre',
@@ -459,6 +451,18 @@ const MenuBurger = memo(() => {
         { name: 'Devenir sponsor', to: '/nous-rejoindre/sponsor' },
       ],
     },
+    
+    // Move "Besoin d'aide" to the end
+    {
+      key: 'aide',
+      label: "Besoin d'aide",
+      icon: <Ticket className="w-5 h-5 mr-2 text-[#528eb2]" />,
+      roles: [ROLES.TEACHER, ROLES.STUDENT, ROLES.HR, ROLES.RECRUITER, ROLES.GUEST],
+      links: [
+        { name: 'Créer un ticket', to: '/tickets/new', roles: [ROLES.TEACHER, ROLES.STUDENT, ROLES.HR, ROLES.RECRUITER, ROLES.GUEST] },
+        { name: 'Mes tickets', to: '/tickets', roles: [ROLES.TEACHER, ROLES.STUDENT, ROLES.HR, ROLES.RECRUITER, ROLES.GUEST] },
+      ],
+    },
   ];
 
   return (
@@ -557,7 +561,7 @@ const MenuBurger = memo(() => {
 
                 <div className="scrollable-div overflow-y-auto flex-grow">
                   <ul className="py-2">
-                    {menuItems.map(({ key, icon, label, roles: itemRoles, links, to }) => {
+                    {menuItems.map(({ key, icon, label, roles: itemRoles, links, to, onClick }) => {
                       // Si l'élément n'a pas de rôles définis ou si l'utilisateur a les rôles requis
                       if (!itemRoles || hasAnyRole(itemRoles)) {
                         return (
@@ -565,10 +569,28 @@ const MenuBurger = memo(() => {
                             {to ? (
                               // Élément de menu simple avec lien direct
                               <li className="menu-item">
-                                <Link to={to} className="flex items-center px-4 py-2.5 w-full" onClick={() => setMenuOpen(false)}>
-                                  {icon}
-                                  <span>{label}</span>
-                                </Link>
+                                {key === 'support' ? (
+                                  // Special handler for support item
+                                  <div 
+                                    className="flex items-center px-4 py-2.5 w-full cursor-pointer" 
+                                    onClick={() => {
+                                      setMenuOpen(false);
+                                      navigate('/tickets');
+                                    }}
+                                  >
+                                    {icon}
+                                    <span>{label}</span>
+                                  </div>
+                                ) : (
+                                  <Link 
+                                    to={to} 
+                                    className="flex items-center px-4 py-2.5 w-full" 
+                                    onClick={() => setMenuOpen(false)}
+                                  >
+                                    {icon}
+                                    <span>{label}</span>
+                                  </Link>
+                                )}
                               </li>
                             ) : (
                               // Élément de menu avec sous-menu
diff --git a/frontend/src/components/Navbar.jsx b/frontend/src/components/Navbar.jsx
index 5989fda..512fc30 100644
--- a/frontend/src/components/Navbar.jsx
+++ b/frontend/src/components/Navbar.jsx
@@ -12,7 +12,7 @@ import {
   User,
   Bell,
   Search,
-  Clipboard,
+  Clipboard
 } from "lucide-react";
 import {
   DropdownMenu,
diff --git a/frontend/src/components/TicketDetail.jsx b/frontend/src/components/TicketDetail.jsx
new file mode 100644
index 0000000..50972ca
--- /dev/null
+++ b/frontend/src/components/TicketDetail.jsx
@@ -0,0 +1,482 @@
+import { useState, useEffect } from 'react';
+import { useParams, useNavigate } from 'react-router-dom';
+import axiosInstance from '../lib/axios';
+import { toast } from 'sonner';
+
+// Status badge colors based on status name
+const STATUS_COLORS = {
+  'Open': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
+  'In Progress': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
+  'Resolved': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
+  'Closed': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
+  'Pending': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
+};
+
+// Priority badge colors
+const PRIORITY_COLORS = {
+  'Low': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
+  'Normal': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
+  'High': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
+};
+
+export default function TicketDetail() {
+  const { id } = useParams();
+  const navigate = useNavigate();
+  const [ticket, setTicket] = useState(null);
+  const [statuses, setStatuses] = useState([]);
+  const [selectedStatus, setSelectedStatus] = useState(null);
+  const [selectedPriority, setSelectedPriority] = useState('Normal');
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState(null);
+  const [isAdmin, setIsAdmin] = useState(false);
+  const [updating, setUpdating] = useState(false);
+  const [newComment, setNewComment] = useState('');
+  const [addingComment, setAddingComment] = useState(false);
+
+  useEffect(() => {
+    const checkUserRole = () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) return;
+        
+        const tokenParts = token.split('.');
+        if (tokenParts.length !== 3) return;
+        
+        const payload = JSON.parse(atob(tokenParts[1]));
+        console.log('User roles from token:', payload.roles); // Debug log
+        
+        const userIsAdmin = payload.roles && 
+          (payload.roles.includes('ROLE_ADMIN') || 
+           payload.roles.includes('ROLE_SUPER_ADMIN') ||
+           payload.roles.includes('ROLE_SUPERADMIN'));
+           
+        console.log('Is admin check result:', userIsAdmin); // Debug log
+        setIsAdmin(userIsAdmin);
+      } catch (error) {
+        console.error('Error checking admin role:', error);
+      }
+    };
+
+    checkUserRole();
+    fetchTicketData();
+    
+    // Try to load statuses separately
+    const fetchStatuses = async () => {
+      try {
+        const statusResponse = await axiosInstance.get('/tickets/status');
+        console.log('Status response:', statusResponse.data);
+        
+        if (statusResponse.data && statusResponse.data.statuses) {
+          setStatuses(statusResponse.data.statuses);
+        }
+      } catch (statusError) {
+        console.error('Error fetching statuses:', statusError);
+      }
+    };
+    
+    fetchStatuses();
+  }, [id]); // Re-run when ticket ID changes
+
+  const handleStatusChange = async () => {
+    if (!isAdmin || !selectedStatus || selectedStatus === ticket.status.id) {
+      return;
+    }
+    
+    setUpdating(true);
+    
+    try {
+      const response = await axiosInstance.put(`/tickets/${id}`, {
+        statusId: selectedStatus
+      });
+      
+      setTicket(response.data.ticket);
+      toast.success('Ticket status updated successfully');
+    } catch (error) {
+      console.error('Error updating ticket:', error);
+      toast.error(error.response?.data?.message || 'Failed to update ticket');
+    } finally {
+      setUpdating(false);
+    }
+  };
+
+  const handleTicketUpdate = async () => {
+    if (!isAdmin || (selectedStatus === ticket.status.id && selectedPriority === ticket.priority)) {
+      return;
+    }
+    
+    setUpdating(true);
+    
+    try {
+      console.log('Sending ticket update:', { 
+        statusId: selectedStatus, 
+        priority: selectedPriority,
+        currentStatusId: ticket.status.id,
+        currentStatusName: ticket.status.name 
+      });
+      
+      const response = await axiosInstance.put(`/tickets/${id}`, {
+        statusId: selectedStatus,
+        priority: selectedPriority
+      });
+      
+      console.log('Ticket update response:', response.data);
+      
+      // Find the selected status object to update the ticket properly
+      const updatedStatus = statuses.find(status => status.id === selectedStatus);
+      console.log('Found status for update:', updatedStatus);
+      
+      // Create a proper updated ticket state
+      const updatedTicket = {
+        ...ticket,
+        status: updatedStatus || ticket.status,
+        priority: selectedPriority,
+        updatedAt: new Date().toISOString()
+      };
+      
+      console.log('Updated ticket state:', updatedTicket);
+      setTicket(updatedTicket);
+      toast.success('Ticket mis à jour avec succès');
+      
+      // Optionally refresh the data from the server to ensure we have the latest state
+      fetchTicketData();
+    } catch (error) {
+      console.error('Error updating ticket:', error);
+      toast.error(error.response?.data?.message || 'Échec de la mise à jour du ticket');
+    } finally {
+      setUpdating(false);
+    }
+  };
+
+  const fetchTicketData = async () => {
+    try {
+      setLoading(true);
+      console.log(`Refreshing ticket data for ID: ${id}`);
+      
+      const token = localStorage.getItem('token');
+      if (!token) {
+        setError('Authentication required');
+        setLoading(false);
+        return;
+      }
+      
+      // Log the request we're about to make for debugging
+      console.log('About to request:', `/tickets/${id}`);
+      console.log('Authorization header set:', !!token);
+      
+      try {
+        // Fetch ticket details using axiosInstance which handles baseURL and authentication
+        const response = await axiosInstance.get(`/tickets/${id}`);
+        console.log('Refreshed ticket response:', response.data);
+        
+        if (response.data && response.data.ticket) {
+          setTicket(response.data.ticket);
+          setSelectedStatus(response.data.ticket.status?.id || '');
+          setSelectedPriority(response.data.ticket.priority || 'Normal');
+          setLoading(false);
+        } else {
+          throw new Error('Invalid ticket data received');
+        }
+      } catch (error) {
+        console.error('Error fetching specific ticket. Status:', error.response?.status);
+        console.error('Error response:', error.response?.data);
+        
+        // Try to fetch from /tickets endpoint if there's a 403
+        if (error.response?.status === 403) {
+          console.log('Permission denied for direct access, trying to fetch from tickets list');
+          try {
+            // Fetch all tickets (which we know works for admin ticket list)
+            const allTicketsResponse = await axiosInstance.get('/tickets');
+            console.log('All tickets response:', allTicketsResponse.data);
+            
+            if (allTicketsResponse.data?.tickets?.length > 0) {
+              // Find the ticket with the matching ID
+              const matchingTicket = allTicketsResponse.data.tickets.find(
+                ticket => ticket.id === parseInt(id)
+              );
+              
+              if (matchingTicket) {
+                console.log('Found matching ticket in all tickets response:', matchingTicket);
+                setTicket(matchingTicket);
+                setSelectedStatus(matchingTicket.status?.id || '');
+                setSelectedPriority(matchingTicket.priority || 'Normal');
+                setLoading(false);
+                return;
+              }
+            }
+            
+            // If we get here, we didn't find the ticket
+            setError("Vous n'avez pas accès à ce ticket.");
+            setLoading(false);
+          } catch (fallbackError) {
+            console.error('Error in fallback tickets fetch:', fallbackError);
+            setError("Vous n'avez pas accès à ce ticket.");
+            setLoading(false);
+          }
+        } else {
+          setError(error.response?.data?.message || 'Failed to load ticket details');
+          setLoading(false);
+        }
+      }
+    } catch (error) {
+      console.error('Unexpected error refreshing ticket details:', error);
+      setError(error.message || 'Failed to load ticket details');
+      setLoading(false);
+    }
+  };
+
+  const handleAddComment = async () => {
+    if (!newComment.trim()) return;
+    
+    setAddingComment(true);
+    
+    try {
+      const response = await axiosInstance.post(`/tickets/${id}/comments`, {
+        content: newComment.trim(),
+        isFromAdmin: isAdmin
+      });
+      
+      // Update the local state with the new comment
+      setTicket(prevTicket => ({
+        ...prevTicket,
+        comments: [...(prevTicket.comments || []), response.data.comment]
+      }));
+      
+      setNewComment('');
+      toast.success('Commentaire ajouté avec succès');
+    } catch (error) {
+      console.error('Error adding comment:', error);
+      toast.error(error.response?.data?.message || 'Échec de l\'ajout du commentaire');
+    } finally {
+      setAddingComment(false);
+    }
+  };
+
+  if (loading) {
+    return (
+      <div className="flex justify-center items-center min-h-screen">
+        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
+      </div>
+    );
+  }
+
+  if (error || !ticket) {
+    return (
+      <div className="text-center p-6">
+        <p className="text-red-500 mb-4">{error || 'Ticket not found'}</p>
+        <button 
+          onClick={() => navigate(isAdmin ? '/admin/tickets' : '/tickets')}
+          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
+        >
+          Retour aux tickets
+        </button>
+      </div>
+    );
+  }
+
+  return (
+    <div className="max-w-4xl mx-auto p-6">
+      <div className="mb-6">
+        <button 
+          onClick={() => navigate(isAdmin ? '/admin/tickets' : '/tickets')}
+          className="text-blue-500 hover:text-blue-700 flex items-center"
+        >
+          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
+            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
+          </svg>
+          Retour aux tickets
+        </button>
+      </div>
+      
+      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
+        <div className="p-6">
+          <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-6">
+            <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 md:mb-0">
+              Ticket #{ticket.id}: {ticket.title}
+            </h1>
+            
+            <div className="flex items-center space-x-2">
+              <span className={`px-3 py-1 text-sm font-semibold rounded-full ${STATUS_COLORS[ticket.status.name]}`}>
+                {ticket.status.name}
+              </span>
+              <span className={`px-3 py-1 text-sm font-semibold rounded-full ${PRIORITY_COLORS[ticket.priority]}`}>
+                {ticket.priority || 'Normal'}
+              </span>
+            </div>
+          </div>
+          
+          <div className="border-t border-gray-200 dark:border-gray-700 py-4">
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
+              <div>
+                <p className="text-sm text-gray-500 dark:text-gray-400">Créé par</p>
+                <p className="font-medium text-gray-900 dark:text-white">
+                  {ticket.creator.firstName} {ticket.creator.lastName}
+                </p>
+              </div>
+              <div>
+                <p className="text-sm text-gray-500 dark:text-gray-400">Créé le</p>
+                <p className="font-medium text-gray-900 dark:text-white">
+                  {new Date(ticket.createdAt).toLocaleString()}
+                </p>
+              </div>
+              {ticket.assignedTo && (
+                <div>
+                  <p className="text-sm text-gray-500 dark:text-gray-400">Assigné à</p>
+                  <p className="font-medium text-gray-900 dark:text-white">
+                    {ticket.assignedTo.firstName} {ticket.assignedTo.lastName}
+                  </p>
+                </div>
+              )}
+              {ticket.updatedAt && (
+                <div>
+                  <p className="text-sm text-gray-500 dark:text-gray-400">Dernière mise à jour</p>
+                  <p className="font-medium text-gray-900 dark:text-white">
+                    {new Date(ticket.updatedAt).toLocaleString()}
+                  </p>
+                </div>
+              )}
+              {ticket.resolvedAt && (
+                <div>
+                  <p className="text-sm text-gray-500 dark:text-gray-400">Résolu le</p>
+                  <p className="font-medium text-gray-900 dark:text-white">
+                    {new Date(ticket.resolvedAt).toLocaleString()}
+                  </p>
+                </div>
+              )}
+            </div>
+            
+            <div className="mb-6">
+              <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Description</h2>
+              <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded">
+                <p className="text-gray-900 dark:text-white whitespace-pre-wrap">{ticket.description}</p>
+              </div>
+            </div>
+            
+            {ticket.service && (
+              <div className="mb-6">
+                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Service concerné</h2>
+                <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded">
+                  <p className="text-gray-900 dark:text-white">
+                    {ticket.service.name}
+                    {ticket.service.description && (
+                      <span className="text-gray-600 dark:text-gray-400 ml-2">- {ticket.service.description}</span>
+                    )}
+                  </p>
+                </div>
+              </div>
+            )}
+            
+            {/* Ticket Comments/Responses Section */}
+            <div className="mb-6 border-t border-gray-200 dark:border-gray-700 pt-6">
+              <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Communications</h2>
+              
+              {/* Display existing comments */}
+              <div className="space-y-4 mb-6">
+                {ticket.comments && ticket.comments.length > 0 ? (
+                  ticket.comments.map((comment) => (
+                    <div 
+                      key={comment.id} 
+                      className={`p-4 rounded-lg ${
+                        comment.isFromAdmin 
+                          ? 'bg-blue-50 dark:bg-blue-900/30 ml-8' 
+                          : 'bg-gray-50 dark:bg-gray-700 mr-8'
+                      }`}
+                    >
+                      <div className="flex justify-between mb-2">
+                        <p className="font-medium text-sm">
+                          {comment.isFromAdmin ? 'Support' : ticket.creator.firstName + ' ' + ticket.creator.lastName}
+                        </p>
+                        <p className="text-xs text-gray-500 dark:text-gray-400">
+                          {new Date(comment.createdAt).toLocaleString()}
+                        </p>
+                      </div>
+                      <p className="text-gray-900 dark:text-white whitespace-pre-wrap">{comment.content}</p>
+                    </div>
+                  ))
+                ) : (
+                  <div className="text-center py-4 text-gray-500 dark:text-gray-400">
+                    Aucune communication pour le moment
+                  </div>
+                )}
+              </div>
+              
+              {/* Add new comment form */}
+              <div className="mt-4">
+                <h3 className="text-md font-medium text-gray-900 dark:text-white mb-2">
+                  {isAdmin ? 'Répondre au ticket' : 'Ajouter un commentaire'}
+                </h3>
+                <textarea
+                  value={newComment}
+                  onChange={(e) => setNewComment(e.target.value)}
+                  rows={4}
+                  className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+                  placeholder={isAdmin ? "Votre réponse au ticket..." : "Ajoutez des informations complémentaires..."}
+                ></textarea>
+                <div className="flex justify-end mt-2">
+                  <button
+                    onClick={handleAddComment}
+                    disabled={!newComment.trim() || addingComment}
+                    className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
+                  >
+                    {addingComment ? 'Envoi...' : 'Envoyer'}
+                  </button>
+                </div>
+              </div>
+            </div>
+            
+            {isAdmin && (
+              <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
+                <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Actions administrateur</h2>
+                
+                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
+                  <div>
+                    <label htmlFor="status" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+                      Mise à jour du statut
+                    </label>
+                    <select
+                      id="status"
+                      value={selectedStatus}
+                      onChange={(e) => setSelectedStatus(Number(e.target.value))}
+                      className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+                    >
+                      {statuses.map((status) => (
+                        <option key={status.id} value={status.id}>
+                          {status.name}
+                        </option>
+                      ))}
+                    </select>
+                  </div>
+                  
+                  <div>
+                    <label htmlFor="priority" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+                      Mise à jour de la priorité
+                    </label>
+                    <select
+                      id="priority"
+                      value={selectedPriority}
+                      onChange={(e) => setSelectedPriority(e.target.value)}
+                      className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+                    >
+                      <option value="Low">Low</option>
+                      <option value="Normal">Normal</option>
+                      <option value="High">High</option>
+                    </select>
+                  </div>
+                </div>
+                
+                <div className="flex justify-end">
+                  <button
+                    onClick={handleTicketUpdate}
+                    disabled={updating || (selectedStatus === ticket.status.id && selectedPriority === ticket.priority)}
+                    className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
+                  >
+                    {updating ? 'Mise à jour...' : 'Mettre à jour le ticket'}
+                  </button>
+                </div>
+              </div>
+            )}
+          </div>
+        </div>
+      </div>
+    </div>
+  );
+} 
\ No newline at end of file
diff --git a/frontend/src/components/TicketForm.jsx b/frontend/src/components/TicketForm.jsx
new file mode 100644
index 0000000..9eb1590
--- /dev/null
+++ b/frontend/src/components/TicketForm.jsx
@@ -0,0 +1,213 @@
+import { useState, useEffect } from 'react';
+import { useNavigate } from 'react-router-dom';
+import axios from 'axios';
+import { toast } from 'sonner';
+
+export default function TicketForm() {
+  const [title, setTitle] = useState('');
+  const [description, setDescription] = useState('');
+  const [serviceId, setServiceId] = useState('');
+  const [services, setServices] = useState([]);
+  const [isSubmitting, setIsSubmitting] = useState(false);
+  const [isLoading, setIsLoading] = useState(true);
+  const [descriptionPlaceholder, setDescriptionPlaceholder] = useState('Veuillez fournir les détails de votre problème');
+  const [isAdmin, setIsAdmin] = useState(false);
+  const navigate = useNavigate();
+
+  useEffect(() => {
+    // Check if user has admin role
+    const checkAdminRole = () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) return;
+        
+        const tokenParts = token.split('.');
+        if (tokenParts.length !== 3) return;
+        
+        const payload = JSON.parse(atob(tokenParts[1]));
+        const userIsAdmin = payload.roles && 
+          (payload.roles.includes('ROLE_ADMIN') || 
+           payload.roles.includes('ROLE_SUPERADMIN'));
+           
+        setIsAdmin(userIsAdmin);
+      } catch (error) {
+        console.error('Error checking admin role:', error);
+      }
+    };
+    
+    checkAdminRole();
+  }, []);
+
+  useEffect(() => {
+    const fetchServices = async () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) {
+          toast.error('Authentication required');
+          navigate('/login');
+          return;
+        }
+        
+        const response = await axios.get('/api/ticket-services', {
+          headers: {
+            Authorization: `Bearer ${token}`
+          }
+        });
+        
+        setServices(response.data);
+        setIsLoading(false);
+      } catch (error) {
+        console.error('Error fetching services:', error);
+        toast.error('Failed to load services');
+        setIsLoading(false);
+      }
+    };
+    
+    fetchServices();
+  }, [navigate]);
+
+  // Update description placeholder when service changes
+  const handleServiceChange = (e) => {
+    const selectedId = e.target.value;
+    setServiceId(selectedId);
+    
+    // Find the selected service and update placeholder
+    if (selectedId) {
+      const selectedService = services.find(service => service.id == selectedId);
+      if (selectedService && selectedService.description) {
+        setDescriptionPlaceholder(`${selectedService.description} - Veuillez fournir plus de détails`);
+      } else {
+        setDescriptionPlaceholder('Veuillez fournir les détails de votre problème');
+      }
+    } else {
+      setDescriptionPlaceholder('Veuillez fournir les détails de votre problème');
+    }
+  };
+
+  const handleSubmit = async (e) => {
+    e.preventDefault();
+    
+    if (!title.trim() || !description.trim() || !serviceId) {
+      toast.error('Veuillez remplir tous les champs obligatoires');
+      return;
+    }
+    
+    setIsSubmitting(true);
+    
+    try {
+      const token = localStorage.getItem('token');
+      if (!token) {
+        toast.error('Authentication required');
+        navigate('/login');
+        return;
+      }
+      
+      const response = await axios.post('/api/tickets', {
+        title: title.trim(),
+        description: description.trim(),
+        serviceId: parseInt(serviceId)
+      }, {
+        headers: {
+          'Content-Type': 'application/json',
+          'Authorization': `Bearer ${token}`
+        }
+      });
+      
+      toast.success('Ticket créé avec succès');
+      // Navigate based on user role
+      if (response.data.isAdmin) {
+        navigate('/admin/tickets');
+      } else {
+        navigate('/tickets');
+      }
+    } catch (error) {
+      console.error('Error creating ticket:', error);
+      toast.error(error.response?.data?.message || 'Échec de la création du ticket');
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  if (isLoading) {
+    return (
+      <div className="flex justify-center items-center min-h-screen">
+        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
+      <h2 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">Créer un ticket de support</h2>
+      
+      <form onSubmit={handleSubmit} className="space-y-6">
+        <div>
+          <label htmlFor="title" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+            Titre *
+          </label>
+          <input
+            id="title"
+            type="text"
+            value={title}
+            onChange={(e) => setTitle(e.target.value)}
+            className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            placeholder="Description brève de votre problème"
+            required
+          />
+        </div>
+        
+        <div>
+          <label htmlFor="service" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+            Service concerné *
+          </label>
+          <select
+            id="service"
+            value={serviceId}
+            onChange={handleServiceChange}
+            className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            required
+          >
+            <option value="">Sélectionner un service</option>
+            {services.map((service) => (
+              <option key={service.id} value={service.id}>
+                {service.name}
+              </option>
+            ))}
+          </select>
+        </div>
+        
+        <div>
+          <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+            Description *
+          </label>
+          <textarea
+            id="description"
+            value={description}
+            onChange={(e) => setDescription(e.target.value)}
+            rows={6}
+            className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            placeholder={descriptionPlaceholder}
+            required
+          />
+        </div>
+        
+        <div className="flex justify-end">
+          <button
+            type="button"
+            onClick={() => navigate(-1)}
+            className="mr-4 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 dark:bg-gray-700 dark:text-white dark:border-gray-600 dark:hover:bg-gray-600"
+          >
+            Annuler
+          </button>
+          <button
+            type="submit"
+            disabled={isSubmitting}
+            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
+          >
+            {isSubmitting ? 'Envoi en cours...' : 'Envoyer'}
+          </button>
+        </div>
+      </form>
+    </div>
+  );
+} 
\ No newline at end of file
diff --git a/frontend/src/components/TicketList.jsx b/frontend/src/components/TicketList.jsx
new file mode 100644
index 0000000..ab8ea7d
--- /dev/null
+++ b/frontend/src/components/TicketList.jsx
@@ -0,0 +1,359 @@
+import { useState, useEffect } from 'react';
+import { Link } from 'react-router-dom';
+import axios from 'axios';
+import { toast } from 'sonner';
+
+// Status badge colors based on status name
+const STATUS_COLORS = {
+  'Ouvert': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
+  'En cours': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
+  'Résolu': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
+  'Fermé': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
+  'En attente': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
+};
+
+// Priority badge colors
+const PRIORITY_COLORS = {
+  'Low': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
+  'Normal': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
+  'High': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
+};
+
+export default function TicketList() {
+  const [tickets, setTickets] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState(null);
+  const [statusFilter, setStatusFilter] = useState('');
+  const [priorityFilter, setPriorityFilter] = useState('');
+  const [serviceFilter, setServiceFilter] = useState('');
+  const [isAdmin, setIsAdmin] = useState(false);
+  const [statuses, setStatuses] = useState([]);
+  const [services, setServices] = useState([]);
+
+  // Check if user has admin role
+  useEffect(() => {
+    const checkAdminRole = () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) return;
+        
+        const tokenParts = token.split('.');
+        if (tokenParts.length !== 3) return;
+        
+        const payload = JSON.parse(atob(tokenParts[1]));
+        const userIsAdmin = payload.roles && 
+          (payload.roles.includes('ROLE_ADMIN') || 
+           payload.roles.includes('ROLE_SUPERADMIN'));
+           
+        setIsAdmin(userIsAdmin);
+        
+        // Redirect admin users to the admin tickets page
+        if (userIsAdmin) {
+          window.location.href = '/admin/tickets';
+        }
+      } catch (error) {
+        console.error('Error checking admin role:', error);
+      }
+    };
+    
+    checkAdminRole();
+  }, []);
+
+  // Fetch statuses for filtering
+  useEffect(() => {
+    const fetchStatuses = async () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) return;
+        
+        const response = await axios.get('/api/tickets/status', {
+          headers: {
+            'Authorization': `Bearer ${token}`
+          }
+        });
+        
+        if (response.data && response.data.statuses) {
+          setStatuses(response.data.statuses);
+        }
+      } catch (error) {
+        console.error('Error fetching statuses:', error);
+      }
+    };
+    
+    fetchStatuses();
+  }, []);
+
+  // Fetch services for filtering
+  useEffect(() => {
+    const fetchServices = async () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) return;
+        
+        const response = await axios.get('/api/ticket-services', {
+          headers: {
+            'Authorization': `Bearer ${token}`
+          }
+        });
+        
+        setServices(response.data);
+      } catch (error) {
+        console.error('Error fetching services:', error);
+      }
+    };
+    
+    fetchServices();
+  }, []);
+  
+  useEffect(() => {
+    const fetchTickets = async () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) {
+          setError('Authentication required');
+          setLoading(false);
+          return;
+        }
+        
+        const response = await axios.get('/api/tickets', {
+          headers: {
+            'Authorization': `Bearer ${token}`
+          }
+        });
+        
+        setTickets(response.data.tickets);
+        setLoading(false);
+      } catch (error) {
+        console.error('Error fetching tickets:', error);
+        setError('Failed to load tickets. Please try again later.');
+        toast.error('Failed to load tickets');
+        setLoading(false);
+      }
+    };
+
+    fetchTickets();
+  }, []);
+
+  // Apply filters to tickets
+  const filteredTickets = tickets.filter(ticket => {
+    // Status filter
+    if (statusFilter && ticket.status.name !== statusFilter) {
+      return false;
+    }
+    
+    // Priority filter
+    if (priorityFilter && ticket.priority !== priorityFilter) {
+      return false;
+    }
+    
+    // Service filter
+    if (serviceFilter && (!ticket.service || ticket.service.id !== parseInt(serviceFilter))) {
+      return false;
+    }
+    
+    return true;
+  });
+
+  const clearFilters = () => {
+    setStatusFilter('');
+    setPriorityFilter('');
+    setServiceFilter('');
+  };
+
+  if (loading) {
+    return (
+      <div className="flex justify-center items-center min-h-screen">
+        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="container mx-auto px-4 py-8">
+        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
+          <p>{error}</p>
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="container mx-auto px-4 py-8">
+      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
+        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 md:mb-0">
+          Vos tickets
+        </h1>
+        <Link
+          to="/tickets/new"
+          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
+        >
+          Créer un nouveau ticket
+        </Link>
+      </div>
+
+      {/* Filters */}
+      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
+        <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Filtrer les tickets</h2>
+        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+          <div>
+            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+              Statut
+            </label>
+            <select
+              value={statusFilter}
+              onChange={(e) => setStatusFilter(e.target.value)}
+              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            >
+              <option value="">Tous les statuts</option>
+              {statuses.map((status) => (
+                <option key={status.id} value={status.name}>
+                  {status.name}
+                </option>
+              ))}
+            </select>
+          </div>
+          
+          <div>
+            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+              Priorité
+            </label>
+            <select
+              value={priorityFilter}
+              onChange={(e) => setPriorityFilter(e.target.value)}
+              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            >
+              <option value="">Toutes les priorités</option>
+              <option value="Low">Basse</option>
+              <option value="Normal">Normale</option>
+              <option value="High">Haute</option>
+            </select>
+          </div>
+          
+          <div>
+            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+              Service
+            </label>
+            <select
+              value={serviceFilter}
+              onChange={(e) => setServiceFilter(e.target.value)}
+              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            >
+              <option value="">Tous les services</option>
+              {services.map((service) => (
+                <option key={service.id} value={service.id}>
+                  {service.name}
+                </option>
+              ))}
+            </select>
+          </div>
+        </div>
+        
+        <div className="mt-4 flex justify-end">
+          <button
+            onClick={clearFilters}
+            className="px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600"
+          >
+            Effacer les filtres
+          </button>
+        </div>
+      </div>
+
+      {/* Tickets list */}
+      {filteredTickets.length === 0 ? (
+        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 text-center">
+          <p className="text-gray-500 dark:text-gray-400">
+            Aucun ticket ne correspond à vos critères
+          </p>
+          {(statusFilter || priorityFilter || serviceFilter) && (
+            <button
+              onClick={clearFilters}
+              className="mt-4 px-4 py-2 text-sm text-blue-700 bg-blue-100 rounded-md hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800"
+            >
+              Effacer les filtres
+            </button>
+          )}
+        </div>
+      ) : (
+        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
+          <div className="overflow-x-auto">
+            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
+              <thead className="bg-gray-50 dark:bg-gray-700">
+                <tr>
+                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                    ID
+                  </th>
+                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                    Titre
+                  </th>
+                  {isAdmin && (
+                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                      Créé par
+                    </th>
+                  )}
+                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                    Service
+                  </th>
+                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                    Statut
+                  </th>
+                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                    Priorité
+                  </th>
+                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                    Date de création
+                  </th>
+                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                    Dernière mise à jour
+                  </th>
+                </tr>
+              </thead>
+              <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
+                {filteredTickets.map((ticket) => (
+                  <tr 
+                    key={ticket.id}
+                    className="hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer"
+                    onClick={() => window.location.href = `/tickets/${ticket.id}`}
+                  >
+                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
+                      #{ticket.id}
+                    </td>
+                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
+                      <Link to={`/tickets/${ticket.id}`}>
+                        {ticket.title}
+                      </Link>
+                    </td>
+                    {isAdmin && (
+                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
+                        {ticket.creator ? `${ticket.creator.firstName} ${ticket.creator.lastName}` : 'N/A'}
+                      </td>
+                    )}
+                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
+                      {ticket.service ? ticket.service.name : 'N/A'}
+                    </td>
+                    <td className="px-6 py-4 whitespace-nowrap">
+                      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${STATUS_COLORS[ticket.status.name]}`}>
+                        {ticket.status.name}
+                      </span>
+                    </td>
+                    <td className="px-6 py-4 whitespace-nowrap">
+                      <span className={`px-2 py-1 text-xs font-semibold rounded-full ${PRIORITY_COLORS[ticket.priority || 'Normal']}`}>
+                        {ticket.priority || 'Normal'}
+                      </span>
+                    </td>
+                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
+                      {new Date(ticket.createdAt).toLocaleDateString()}
+                    </td>
+                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
+                      {ticket.updatedAt ? new Date(ticket.updatedAt).toLocaleDateString() : 'N/A'}
+                    </td>
+                  </tr>
+                ))}
+              </tbody>
+            </table>
+          </div>
+        </div>
+      )}
+    </div>
+  );
+} 
\ No newline at end of file
diff --git a/frontend/src/components/admin/AdminTicketList.jsx b/frontend/src/components/admin/AdminTicketList.jsx
new file mode 100644
index 0000000..fd2c2f1
--- /dev/null
+++ b/frontend/src/components/admin/AdminTicketList.jsx
@@ -0,0 +1,534 @@
+import { useState, useEffect } from 'react';
+import { Link, useNavigate, useLocation } from 'react-router-dom';
+import axiosInstance from '../../lib/axios';
+import { toast } from 'sonner';
+
+// Status badge colors based on status name
+const STATUS_COLORS = {
+  'Ouvert': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
+  'En cours': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
+  'Résolu': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
+  'Fermé': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
+  'En attente': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
+};
+
+// Priority badge colors
+const PRIORITY_COLORS = {
+  'Low': 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
+  'Normal': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',
+  'High': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
+};
+
+// Create a component that directly renders tickets from database
+function TicketListTable({ tickets, statuses, services, toggleTicketSelection, selectedTickets }) {
+  if (!tickets || tickets.length === 0) {
+    return (
+      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 text-center">
+        <p className="text-gray-500 dark:text-gray-400">
+          Aucun ticket trouvé
+        </p>
+      </div>
+    );
+  }
+
+  // Find status name by id
+  const getStatusName = (statusId) => {
+    const status = statuses.find(s => s.id === statusId);
+    return status ? status.name : 'Inconnu';
+  };
+
+  // Find service name by id
+  const getServiceName = (serviceId) => {
+    const service = services.find(s => s.id === serviceId);
+    return service ? service.name : 'N/A';
+  };
+
+  return (
+    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
+      <div className="overflow-x-auto">
+        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
+          <thead className="bg-gray-50 dark:bg-gray-700">
+            <tr>
+              <th scope="col" className="px-6 py-3 text-center">
+                <input
+                  type="checkbox"
+                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
+                />
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                ID
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                Titre
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                Créé par
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                Service
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                Statut
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                Priorité
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                Date de création
+              </th>
+              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                Actions
+              </th>
+            </tr>
+          </thead>
+          <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
+            {tickets.map((ticket) => {
+              const statusName = getStatusName(ticket.status_id);
+              const priority = ticket.priority || 'Normal';
+              
+              return (
+                <tr 
+                  key={ticket.id}
+                  className="hover:bg-gray-50 dark:hover:bg-gray-700"
+                >
+                  <td className="px-6 py-4 whitespace-nowrap text-center">
+                    <input
+                      type="checkbox"
+                      checked={selectedTickets?.includes(ticket.id)}
+                      onChange={() => toggleTicketSelection && toggleTicketSelection(ticket.id)}
+                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
+                      onClick={(e) => e.stopPropagation()}
+                    />
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
+                    #{ticket.id}
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">
+                    <Link to={`/tickets/${ticket.id}`}>
+                      {ticket.title}
+                    </Link>
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
+                    {ticket.first_name && ticket.last_name ? `${ticket.first_name} ${ticket.last_name}` : 'N/A'}
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
+                    {ticket.service_id ? getServiceName(ticket.service_id) : 'N/A'}
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap">
+                    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${STATUS_COLORS[statusName]}`}>
+                      {statusName}
+                    </span>
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap">
+                    <span className={`px-2 py-1 text-xs font-semibold rounded-full ${PRIORITY_COLORS[priority]}`}>
+                      {priority}
+                    </span>
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
+                    {new Date(ticket.created_at).toLocaleDateString()}
+                  </td>
+                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
+                    <Link to={`/tickets/${ticket.id}`} className="text-blue-600 hover:text-blue-900 mr-4">
+                      Voir
+                    </Link>
+                  </td>
+                </tr>
+              );
+            })}
+          </tbody>
+        </table>
+      </div>
+    </div>
+  );
+}
+
+export default function AdminTicketList() {
+  const location = useLocation();
+  const [tickets, setTickets] = useState([]);
+  const [rawTickets, setRawTickets] = useState([]);
+  const [users, setUsers] = useState([]);
+  const [selectedTickets, setSelectedTickets] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState(null);
+  const [statusFilter, setStatusFilter] = useState('');
+  const [priorityFilter, setPriorityFilter] = useState('');
+  const [serviceFilter, setServiceFilter] = useState('');
+  const [statuses, setStatuses] = useState([]);
+  const [services, setServices] = useState([]);
+  const [bulkActionStatus, setBulkActionStatus] = useState('');
+  const [processingBulkAction, setProcessingBulkAction] = useState(false);
+
+  useEffect(() => {
+    const fetchData = async () => {
+      try {
+        const token = localStorage.getItem('token');
+        if (!token) {
+          setError('Authentication required');
+          setLoading(false);
+          return;
+        }
+
+        // Debug token information
+        try {
+          const tokenParts = token.split('.');
+          if (tokenParts.length === 3) {
+            const payload = JSON.parse(atob(tokenParts[1]));
+            console.log('JWT Token payload:', payload);
+            console.log('Roles from token:', payload.roles);
+          }
+        } catch (tokenError) {
+          console.error('Error parsing token:', tokenError);
+        }
+
+        try {
+          // Use axiosInstance instead of fetch for consistent error handling
+          console.log('Fetching raw tickets data');
+          const rawResponse = await axiosInstance.get('/tickets/raw-data');
+          console.log('Raw tickets API response:', rawResponse.data);
+          
+          if (rawResponse.data.success && rawResponse.data.rawTickets) {
+            setRawTickets(rawResponse.data.rawTickets);
+            console.log(`Found ${rawResponse.data.rawTickets.length} tickets in raw data`);
+          } else {
+            console.warn('No raw tickets found or unexpected response format:', rawResponse.data);
+          }
+        } catch (rawError) {
+          console.error('Raw fetch error:', rawError.response?.data || rawError.message);
+          
+          // Fallback to regular tickets endpoint
+          try {
+            console.log('Falling back to regular tickets endpoint');
+            const ticketsResponse = await axiosInstance.get('/tickets');
+            console.log('Regular tickets API response:', ticketsResponse.data);
+            
+            if (ticketsResponse.data.success && ticketsResponse.data.tickets) {
+              // Convert regular ticket objects to raw format for compatibility
+              const simpleTickets = ticketsResponse.data.tickets.map(ticket => ({
+                id: ticket.id,
+                title: ticket.title,
+                description: ticket.description,
+                status_id: ticket.status?.id,
+                status_name: ticket.status?.name,
+                priority: ticket.priority,
+                creator_id: ticket.creator?.id,
+                first_name: ticket.creator?.firstName,
+                last_name: ticket.creator?.lastName,
+                service_id: ticket.service?.id,
+                created_at: ticket.createdAt,
+                updated_at: ticket.updatedAt
+              }));
+              
+              setRawTickets(simpleTickets);
+              console.log(`Found ${simpleTickets.length} tickets in regular API`);
+            } else {
+              toast.error('Impossible de récupérer les tickets');
+            }
+          } catch (fallbackError) {
+            console.error('Error in fallback ticket fetch:', fallbackError);
+            toast.error('Erreur lors de la récupération des tickets');
+          }
+        }
+        
+        // Continue with other API calls for statuses and services
+        try {
+          console.log('Fetching statuses');
+          const statusResponse = await axiosInstance.get('/tickets/status');
+          console.log('Statuses API response:', statusResponse.data);
+          
+          if (statusResponse.data && statusResponse.data.statuses) {
+            setStatuses(statusResponse.data.statuses);
+          } else {
+            console.warn('Unexpected statuses response format:', statusResponse.data);
+          }
+        } catch (statusError) {
+          console.error('Error fetching statuses:', statusError.response?.data || statusError.message);
+          toast.error(`Error fetching statuses: ${statusError.response?.data?.message || statusError.message}`);
+        }
+        
+        try {
+          console.log('Fetching services');
+          const servicesResponse = await axiosInstance.get('/ticket-services');
+          console.log('Services API response:', servicesResponse.data);
+          setServices(servicesResponse.data);
+        } catch (servicesError) {
+          console.error('Error fetching services:', servicesError.response?.data || servicesError.message);
+          toast.error(`Error fetching services: ${servicesError.response?.data?.message || servicesError.message}`);
+        }
+        
+        setLoading(false);
+      } catch (error) {
+        console.error('Error in fetchData:', error);
+        setError('Failed to load data. Please try again later.');
+        toast.error('Failed to load data');
+        setLoading(false);
+      }
+    };
+
+    fetchData();
+  }, [location.pathname]);
+
+  const toggleTicketSelection = (ticketId) => {
+    setSelectedTickets(prev => {
+      if (prev.includes(ticketId)) {
+        return prev.filter(id => id !== ticketId);
+      } else {
+        return [...prev, ticketId];
+      }
+    });
+  };
+
+  // Apply filters to raw tickets
+  const filteredTickets = rawTickets.filter(ticket => {
+    // Status filter
+    if (statusFilter && ticket.status_id !== parseInt(statusFilter)) {
+      return false;
+    }
+    
+    // Priority filter
+    if (priorityFilter && ticket.priority !== priorityFilter) {
+      return false;
+    }
+    
+    // Service filter
+    if (serviceFilter && (!ticket.service_id || ticket.service_id !== parseInt(serviceFilter))) {
+      return false;
+    }
+    
+    return true;
+  });
+
+  const clearFilters = () => {
+    setStatusFilter('');
+    setPriorityFilter('');
+    setServiceFilter('');
+  };
+
+  const handleBulkStatusUpdate = async () => {
+    if (!bulkActionStatus || selectedTickets.length === 0) {
+      toast.error('Please select tickets and a status');
+      return;
+    }
+
+    setProcessingBulkAction(true);
+    
+    try {
+      // Find the status ID from the status name
+      const selectedStatus = statuses.find(s => s.name === bulkActionStatus);
+      if (!selectedStatus) {
+        toast.error('Invalid status selected');
+        return;
+      }
+
+      // Get a list of valid ticket IDs to update (use selected tickets or fallback to common IDs)
+      const ticketIdsToUpdate = selectedTickets.length > 0 ? selectedTickets : [199, 200, 201, 202, 203];
+      
+      console.log('Updating tickets with status:', selectedStatus);
+      console.log('Ticket IDs to update:', ticketIdsToUpdate);
+      
+      const response = await axiosInstance.post('/tickets/custom-bulk-update', {
+        ticketIds: ticketIdsToUpdate,
+        statusId: selectedStatus.id
+      });
+
+      if (response.data.success) {
+        toast.success(`Successfully updated ${response.data.updatedCount} tickets`);
+        if (response.data.errors && response.data.errors.length > 0) {
+          toast.warning(`Some tickets could not be updated: ${response.data.errors.join(', ')}`);
+          console.log('Errors:', response.data.errors);
+        }
+        // Clear selection and refresh data
+        setSelectedTickets([]);
+        setBulkActionStatus('');
+        // Refresh the ticket list
+        const rawResponse = await axiosInstance.get('/tickets/raw-data');
+        if (rawResponse.data.success && rawResponse.data.rawTickets) {
+          setRawTickets(rawResponse.data.rawTickets);
+        }
+      } else {
+        toast.error(response.data.message || 'Failed to update tickets');
+      }
+    } catch (error) {
+      console.error('Error updating tickets:', error);
+      toast.error(error.response?.data?.message || 'Failed to update tickets');
+    } finally {
+      setProcessingBulkAction(false);
+    }
+  };
+
+  if (loading) {
+    return (
+      <div className="flex justify-center items-center min-h-screen">
+        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="container mx-auto px-4 py-8">
+        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
+          <p>{error}</p>
+        </div>
+      </div>
+    );
+  }
+
+  return (
+    <div className="container mx-auto px-4 py-8">
+      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
+        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 md:mb-0">
+          Gestion des tickets
+        </h1>
+        <Link
+          to="/tickets/new"
+          className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
+        >
+          Créer un nouveau ticket
+        </Link>
+      </div>
+
+      {/* Bulk Actions */}
+      {selectedTickets.length > 0 && (
+        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
+          <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Actions groupées ({selectedTickets.length} tickets sélectionnés)</h2>
+          <div className="grid grid-cols-1 gap-4">
+            <div>
+              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+                Mise à jour du statut
+              </label>
+              <div className="flex space-x-2">
+                <select
+                  value={bulkActionStatus}
+                  onChange={(e) => setBulkActionStatus(e.target.value)}
+                  className="flex-grow p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+                >
+                  <option value="">Sélectionner un statut</option>
+                  {statuses.map((status) => (
+                    <option key={status.id} value={status.name}>
+                      {status.name}
+                    </option>
+                  ))}
+                </select>
+                <button
+                  onClick={handleBulkStatusUpdate}
+                  disabled={!bulkActionStatus || processingBulkAction}
+                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
+                >
+                  {processingBulkAction ? 'Traitement...' : 'Appliquer'}
+                </button>
+              </div>
+            </div>
+          </div>
+          
+          <div className="mt-4 flex justify-end">
+            <button
+              onClick={() => setSelectedTickets([])}
+              className="px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600"
+            >
+              Désélectionner tout
+            </button>
+          </div>
+        </div>
+      )}
+
+      {/* Filters */}
+      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
+        <h2 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">Filtrer les tickets</h2>
+        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
+          <div>
+            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+              Statut
+            </label>
+            <select
+              value={statusFilter}
+              onChange={(e) => setStatusFilter(e.target.value)}
+              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            >
+              <option value="">Tous les statuts</option>
+              {statuses.map((status) => (
+                <option key={status.id} value={status.id}>
+                  {status.name}
+                </option>
+              ))}
+            </select>
+          </div>
+          
+          <div>
+            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+              Priorité
+            </label>
+            <select
+              value={priorityFilter}
+              onChange={(e) => setPriorityFilter(e.target.value)}
+              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            >
+              <option value="">Toutes les priorités</option>
+              <option value="Low">Basse</option>
+              <option value="Normal">Normale</option>
+              <option value="High">Haute</option>
+            </select>
+          </div>
+          
+          <div>
+            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+              Service
+            </label>
+            <select
+              value={serviceFilter}
+              onChange={(e) => setServiceFilter(e.target.value)}
+              className="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+            >
+              <option value="">Tous les services</option>
+              {services.map((service) => (
+                <option key={service.id} value={service.id}>
+                  {service.name}
+                </option>
+              ))}
+            </select>
+          </div>
+        </div>
+        
+        <div className="mt-4 flex justify-end">
+          <button
+            onClick={clearFilters}
+            className="px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600"
+          >
+            Effacer les filtres
+          </button>
+        </div>
+      </div>
+
+      {/* Tickets list */}
+      {filteredTickets.length === 0 ? (
+        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 text-center">
+          <p className="text-gray-500 dark:text-gray-400">
+            Aucun ticket ne correspond à vos critères
+          </p>
+          {(statusFilter || priorityFilter || serviceFilter) && (
+            <button
+              onClick={clearFilters}
+              className="mt-4 px-4 py-2 text-sm text-blue-700 bg-blue-100 rounded-md hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800"
+            >
+              Effacer les filtres
+            </button>
+          )}
+        </div>
+      ) : (
+        <TicketListTable 
+          tickets={filteredTickets} 
+          statuses={statuses} 
+          services={services} 
+          toggleTicketSelection={toggleTicketSelection} 
+          selectedTickets={selectedTickets} 
+        />
+      )}
+      
+      {/* Debug info */}
+      <div className="mt-8 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg">
+        <h3 className="text-lg font-semibold mb-2">Information de débogage</h3>
+        <p>Total tickets from database: {rawTickets.length}</p>
+        <p>Filtered tickets: {filteredTickets.length}</p>
+      </div>
+    </div>
+  );
+} 
\ No newline at end of file
diff --git a/frontend/src/components/admin/TicketServiceList.jsx b/frontend/src/components/admin/TicketServiceList.jsx
new file mode 100644
index 0000000..97b1371
--- /dev/null
+++ b/frontend/src/components/admin/TicketServiceList.jsx
@@ -0,0 +1,301 @@
+import { useState, useEffect } from 'react';
+import axios from 'axios';
+import { toast } from 'sonner';
+
+export default function TicketServiceList() {
+  const [services, setServices] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState(null);
+  
+  // Form state for adding/editing
+  const [isEditing, setIsEditing] = useState(false);
+  const [editingId, setEditingId] = useState(null);
+  const [name, setName] = useState('');
+  const [description, setDescription] = useState('');
+  const [isSubmitting, setIsSubmitting] = useState(false);
+
+  useEffect(() => {
+    fetchServices();
+  }, []);
+
+  const fetchServices = async () => {
+    try {
+      const token = localStorage.getItem('token');
+      if (!token) {
+        setError('Authentication required');
+        setLoading(false);
+        return;
+      }
+      
+      const response = await axios.get('/api/ticket-services', {
+        headers: {
+          'Authorization': `Bearer ${token}`
+        }
+      });
+      
+      setServices(response.data);
+      setLoading(false);
+    } catch (error) {
+      console.error('Error fetching services:', error);
+      setError('Failed to load services');
+      toast.error('Failed to load services');
+      setLoading(false);
+    }
+  };
+
+  const handleAddNewClick = () => {
+    setIsEditing(true);
+    setEditingId(null);
+    setName('');
+    setDescription('');
+  };
+
+  const handleEditClick = (service) => {
+    setIsEditing(true);
+    setEditingId(service.id);
+    setName(service.name);
+    setDescription(service.description || '');
+  };
+
+  const handleCancelEdit = () => {
+    setIsEditing(false);
+    setEditingId(null);
+    setName('');
+    setDescription('');
+  };
+
+  const handleSubmit = async (e) => {
+    e.preventDefault();
+    
+    if (!name.trim()) {
+      toast.error('Le nom du service est requis');
+      return;
+    }
+    
+    setIsSubmitting(true);
+    
+    try {
+      const token = localStorage.getItem('token');
+      if (!token) {
+        toast.error('Authentication required');
+        return;
+      }
+      
+      const data = {
+        name: name.trim(),
+        description: description.trim() || null
+      };
+      
+      let response;
+      
+      if (editingId) {
+        // Update existing service
+        response = await axios.put(`/api/ticket-services/${editingId}`, data, {
+          headers: {
+            'Content-Type': 'application/json',
+            'Authorization': `Bearer ${token}`
+          }
+        });
+        toast.success('Service mis à jour avec succès');
+      } else {
+        // Create new service
+        response = await axios.post('/api/ticket-services', data, {
+          headers: {
+            'Content-Type': 'application/json',
+            'Authorization': `Bearer ${token}`
+          }
+        });
+        toast.success('Service créé avec succès');
+      }
+      
+      // Reset form and refresh services
+      setIsEditing(false);
+      setEditingId(null);
+      setName('');
+      setDescription('');
+      fetchServices();
+    } catch (error) {
+      console.error('Error saving service:', error);
+      toast.error(error.response?.data?.message || 'Échec de l\'opération');
+    } finally {
+      setIsSubmitting(false);
+    }
+  };
+
+  const handleDelete = async (id) => {
+    if (!window.confirm('Êtes-vous sûr de vouloir supprimer ce service ?')) {
+      return;
+    }
+    
+    try {
+      const token = localStorage.getItem('token');
+      if (!token) {
+        toast.error('Authentication required');
+        return;
+      }
+      
+      await axios.delete(`/api/ticket-services/${id}`, {
+        headers: {
+          'Authorization': `Bearer ${token}`
+        }
+      });
+      
+      toast.success('Service supprimé avec succès');
+      fetchServices();
+    } catch (error) {
+      console.error('Error deleting service:', error);
+      toast.error(error.response?.data?.message || 'Échec de la suppression');
+    }
+  };
+
+  if (loading) {
+    return (
+      <div className="flex justify-center items-center min-h-screen">
+        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
+      </div>
+    );
+  }
+
+  if (error) {
+    return (
+      <div className="p-6 bg-red-100 border border-red-400 text-red-700 rounded-lg">
+        <p>{error}</p>
+      </div>
+    );
+  }
+
+  return (
+    <div className="container mx-auto p-6">
+      <div className="flex justify-between items-center mb-6">
+        <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
+          Gestion des services de support
+        </h1>
+        
+        {!isEditing && (
+          <button
+            onClick={handleAddNewClick}
+            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
+          >
+            Ajouter un service
+          </button>
+        )}
+      </div>
+      
+      {isEditing && (
+        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
+          <h2 className="text-xl font-semibold mb-4 text-gray-900 dark:text-white">
+            {editingId ? 'Modifier le service' : 'Ajouter un service'}
+          </h2>
+          
+          <form onSubmit={handleSubmit} className="space-y-4">
+            <div>
+              <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+                Nom *
+              </label>
+              <input
+                id="name"
+                type="text"
+                value={name}
+                onChange={(e) => setName(e.target.value)}
+                className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+                placeholder="Ex: Support technique, Facturation, etc."
+                required
+              />
+            </div>
+            
+            <div>
+              <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
+                Description
+              </label>
+              <textarea
+                id="description"
+                value={description}
+                onChange={(e) => setDescription(e.target.value)}
+                rows={3}
+                className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
+                placeholder="Description du service (optionnel)"
+              />
+            </div>
+            
+            <div className="flex justify-end space-x-3">
+              <button
+                type="button"
+                onClick={handleCancelEdit}
+                className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700"
+              >
+                Annuler
+              </button>
+              <button
+                type="submit"
+                disabled={isSubmitting}
+                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
+              >
+                {isSubmitting ? 'Enregistrement...' : 'Enregistrer'}
+              </button>
+            </div>
+          </form>
+        </div>
+      )}
+      
+      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
+        <div className="overflow-x-auto">
+          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
+            <thead className="bg-gray-50 dark:bg-gray-700">
+              <tr>
+                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                  ID
+                </th>
+                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                  Nom
+                </th>
+                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                  Description
+                </th>
+                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">
+                  Actions
+                </th>
+              </tr>
+            </thead>
+            <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
+              {services.length === 0 ? (
+                <tr>
+                  <td colSpan="4" className="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
+                    Aucun service n'a été ajouté
+                  </td>
+                </tr>
+              ) : (
+                services.map((service) => (
+                  <tr key={service.id}>
+                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
+                      {service.id}
+                    </td>
+                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
+                      {service.name}
+                    </td>
+                    <td className="px-6 py-4 text-sm text-gray-500 dark:text-gray-400">
+                      {service.description || '-'}
+                    </td>
+                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
+                      <button
+                        onClick={() => handleEditClick(service)}
+                        className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-4"
+                      >
+                        Modifier
+                      </button>
+                      <button
+                        onClick={() => handleDelete(service.id)}
+                        className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
+                      >
+                        Supprimer
+                      </button>
+                    </td>
+                  </tr>
+                ))
+              )}
+            </tbody>
+          </table>
+        </div>
+      </div>
+    </div>
+  );
+} 
\ No newline at end of file
-- 
2.45.2.windows.1

